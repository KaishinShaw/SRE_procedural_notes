legend <- get_legend(ggplot(type1_error_data,
aes(x = sample_size, y = Type_I_Error, color = Method)) +
scale_color_manual(values = c("Wilcoxon" = "#1f77b4", "New_method" = "#2ca02c")))
library(cowplot)
# Reshape type I error data
type1_error_data <- results %>%
select(sample_size, Wilcoxon_type1_error, New_method_type1_error) %>%
gather(key = "Method", value = "Type_I_Error", -sample_size) %>%
mutate(Method = gsub("_type1_error", "", Method))
# Reshape power data
power_data <- results %>%
select(sample_size, Wilcoxon_power, New_method_power) %>%
gather(key = "Method", value = "Power", -sample_size) %>%
mutate(Method = gsub("_power", "", Method))
# Create a common legend
legend <- get_legend(ggplot(type1_error_data,
aes(x = sample_size, y = Type_I_Error, color = Method)) +
scale_color_manual(values = c("Wilcoxon" = "#1f77b4", "New_method" = "#2ca02c")))
# Plot type I error
p1 <- ggplot(type1_error_data, aes(x = sample_size, y = Type_I_Error, color = Method, group = Method)) +
geom_line(size = 1) +
geom_point(size = 3) +
geom_hline(yintercept = 0.05, linetype = "dashed", color = "red") +
theme_minimal() +
scale_color_manual(values = c("Wilcoxon" = "#1f77b4", "New_method" = "#2ca02c")) +
labs(title = "Type I Error Rate Comparison",
x = "Sample Size",
y = "Type I Error Rate") +
theme(text = element_text(size = 12),
plot.title = element_text(hjust = 0.5),
legend.position = "none")
# Plot power
p2 <- ggplot(power_data, aes(x = sample_size, y = Power, color = Method, group = Method)) +
geom_line(size = 1) +
geom_point(size = 3) +
theme_minimal() +
scale_color_manual(values = c("Wilcoxon" = "#1f77b4", "New_method" = "#2ca02c")) +
labs(title = "Power Comparison",
x = "Sample Size",
y = "Power") +
theme(text = element_text(size = 12),
plot.title = element_text(hjust = 0.5),
legend.position = "none")
# Arrange plots with legend on top
grid.arrange(legend,
arrangeGrob(p1, p2, ncol = 2),
nrow = 2,
heights = c(1, 10))
# Print results
print(results)
library(gridExtra)
# Assuming 'results' is already loaded with appropriate columns
# Reshape type I error data
type1_error_data <- results %>%
select(sample_size, Wilcoxon_type1_error, New_method_type1_error) %>%
gather(key = "Method", value = "Type_I_Error", -sample_size) %>%
mutate(Method = gsub("_type1_error", "", Method))
# Reshape power data
power_data <- results %>%
select(sample_size, Wilcoxon_power, New_method_power) %>%
gather(key = "Method", value = "Power", -sample_size) %>%
mutate(Method = gsub("_power", "", Method))
# Plot type I error
p1 <- ggplot(type1_error_data, aes(x = sample_size, y = Type_I_Error, color = Method, group = Method)) +
geom_line(size = 1) +
geom_point(size = 3) +
geom_hline(yintercept = 0.05, linetype = "dashed", color = "red") +
theme_minimal() +
scale_color_manual(values = c("Wilcoxon" = "#1f77b4", "New_method" = "#2ca02c")) +
labs(title = "Type I Error Rate Comparison",
x = "Sample Size",
y = "Type I Error Rate") +
theme(text = element_text(size = 12),
plot.title = element_text(hjust = 0.5),
legend.position = "top")
# Plot power
p2 <- ggplot(power_data, aes(x = sample_size, y = Power, color = Method, group = Method)) +
geom_line(size = 1) +
geom_point(size = 3) +
theme_minimal() +
scale_color_manual(values = c("Wilcoxon" = "#1f77b4", "New_method" = "#2ca02c")) +
labs(title = "Power Comparison",
x = "Sample Size",
y = "Power") +
theme(text = element_text(size = 12),
plot.title = element_text(hjust = 0.5),
legend.position = "top")
# Display plots side by side
grid.arrange(p1, p2, ncol = 2)
# No need to print results as they are used in plots
# print(results)
library(ggplot2)
library(tidyr)
library(dplyr)
library(MASS)
library(gridExtra)
set.seed(20241104)
n_simulations <- 1000
n_values <- c(30, 50, 70, 100)
generate_rank_data <- function(data) {
eps <- 1e-7
qnts1 <- quantile(data[, 1], probs = c(0, 1/3, 2/3, 1))
qnts1[1] <- qnts1[1] - eps
qnts1[4] <- qnts1[4] + eps
rank1 <- cut(data[, 1], breaks = qnts1, labels = c(-1, 0, 1), include.lowest = TRUE)
rank2 <- cut(data[, 2], breaks = qnts1, labels = c(-1, 0, 1), include.lowest = TRUE)
return(data.frame(rank1 = as.numeric(rank1), rank2 = as.numeric(rank2)))
}
wilcox_test <- function(data) {
return(wilcox.test(data$rank1, data$rank2, paired = TRUE, exact = FALSE)$p.value)
}
new_method_test <- function(data) {
v_i <- ifelse(data$rank2 - data$rank1 > 0, 1, ifelse(data$rank2 - data$rank1 < 0, -1, 0))
counts <- table(factor(v_i, levels = c(-1, 0, 1)))
p1 <- counts["-1"] / nrow(data)
p3 <- counts["1"] / nrow(data)
OC <- p3 - p1
var_OC <- (p1 + p3 - (p1 - p3)^2) / nrow(data)
z_OC <- OC / sqrt(var_OC)
p_value_OC <- 2 * (1 - pnorm(abs(z_OC)))
return(p_value_OC)
}
results <- data.frame(
sample_size = numeric(length(n_values)),
Wilcoxon_type1_error = numeric(length(n_values)),
New_method_type1_error = numeric(length(n_values)),
Wilcoxon_power = numeric(length(n_values)),
New_method_power = numeric(length(n_values))
)
for (j in seq_along(n_values)) {
n <- n_values[j]
wilcoxon_p_values <- c()
new_method_p_values <- c()
mu <- c(0, 0)
sigma <- matrix(c(1, 0.4, 0.4, 1), nrow = 2)
for (i in 1:n_simulations) {
data <- MASS::mvrnorm(n, mu, sigma)
data0 <- generate_rank_data(data)
wilcoxon_p_values[i] <- ifelse(wilcox_test(data0) < 0.05, 1, 0)
new_method_p_values[i] <- ifelse(new_method_test(data0) < 0.05, 1, 0)
}
results[j, "Wilcoxon_type1_error"] <- mean(wilcoxon_p_values)
results[j, "New_method_type1_error"] <- mean(new_method_p_values)
wilcoxon_p_values_alternative <- c()
new_method_p_values_alternative <- c()
mu <- c(0, 0.5)
sigma <- matrix(c(1, 0.4, 0.4, 1), nrow = 2)
for (i in 1:n_simulations) {
data <- MASS::mvrnorm(n, mu, sigma)
data0 <- generate_rank_data(data)
wilcoxon_p_values_alternative[i] <- ifelse(wilcox_test(data0) < 0.05, 1, 0)
new_method_p_values_alternative[i] <- ifelse(new_method_test(data0) < 0.05, 1, 0)
}
results[j, "Wilcoxon_power"] <- mean(wilcoxon_p_values_alternative)
results[j, "New_method_power"] <- mean(new_method_p_values_alternative)
results[j, "sample_size"] <- n
}
type1_error_data <- results %>%
select(sample_size, Wilcoxon_type1_error, New_method_type1_error) %>%
gather(key = "Method", value = "Type_I_Error", -sample_size) %>%
mutate(Method = gsub("_type1_error", "", Method))
power_data <- results %>%
select(sample_size, Wilcoxon_power, New_method_power) %>%
gather(key = "Method", value = "Power", -sample_size) %>%
mutate(Method = gsub("_power", "", Method))
p1 <- ggplot(type1_error_data, aes(x = sample_size, y = Type_I_Error, color = Method, group = Method)) +
geom_line(size = 1) +
geom_point(size = 3) +
geom_hline(yintercept = 0.05, linetype = "dashed", color = "red") +
theme_minimal() +
scale_color_manual(values = c("Wilcoxon" = "#1f77b4", "New_method" = "#2ca02c")) +
labs(title = "Type I Error Rate Comparison", x = "Sample Size", y = "Type I Error Rate") +
theme(text = element_text(size = 12), plot.title = element_text(hjust = 0.5), legend.position = "top")
p2 <- ggplot(power_data, aes(x = sample_size, y = Power, color = Method, group = Method)) +
geom_line(size = 1) +
geom_point(size = 3) +
theme_minimal() +
scale_color_manual(values = c("Wilcoxon" = "#1f77b4", "New_method" = "#2ca02c")) +
labs(title = "Power Comparison", x = "Sample Size", y = "Power") +
theme(text = element_text(size = 12), plot.title = element_text(hjust = 0.5), legend.position = "top")
grid.arrange(p1, p2, ncol = 2)
result <- choose(26, 4) + choose(26, 5) + choose(26, 6)
# 打印结果
print(result)
# 初始化结果变量
result <- 0
# 使用循环计算 C(26, k) 并累加
for (k in 4:16) {
result <- result + choose(26, k)
}
# 打印结果
print(result)
# 初始化结果变量
result <- 0
# 使用循环计算 C(26, k) 并累加
for (k in 12:16) {
result <- result + choose(26, k)
}
# 打印结果
print(result)
# 初始化结果变量
result <- 0
# 使用循环计算 C(26, k) 并累加
for (k in 4:12) {
result <- result + choose(26, k)
}
# 打印结果
print(result)
# 初始化结果变量
result <- 0
# 使用循环计算 C(26, k) 并累加
for (k in 4:13) {
result <- result + choose(26, k)
}
# 打印结果
print(result)
# 初始化结果变量
result <- 0
# 使用循环计算 C(16, k) 并累加
for (k in 4:13) {
result <- result + choose(16, k)
}
# 打印结果
print(result)
# 初始化结果变量
result <- 0
# 使用循环计算 C(16, k) 并累加
for (k in 4:16) {
result <- result + choose(16, k)
}
# 打印结果
print(result)
# 初始化结果变量
result <- 0
# 使用循环计算 C(16, k) 并累加
for (k in 4:11) {
result <- result + choose(26, k)
}
# 打印结果
print(result)
# 初始化结果变量
result <- 0
# 使用循环计算 C(16, k) 并累加
for (k in 4:10) {
result <- result + choose(26, k)
}
# 打印结果
print(result)
> # 初始化结果变量
result <- 0
# 使用循环计算 C(16, k) 并累加
for (k in 4:13) {
+     result <- result + choose(13, k)
+ }
result <- 0
# 使用循环计算 C(16, k) 并累加
for (k in 4:13) {
result <- result + choose(13, k)}
# 打印结果
print(result)
result <- 0
# 使用循环计算 C(16, k) 并累加
for (k in 4:13) {
result <- result + choose(13, k)}
# 打印结果
print(result)
[1] 64839
result <- 0
# 使用循环计算 C(16, k) 并累加
for (k in 4:13) {
result <- result + choose(13, k)}
# 打印结果
print(result)
result <- 0
# 使用循环计算 C(16, k) 并累加
for (k in 4:10) {
result <- result + choose(18, k)}
# 打印结果
print(result)
result <- 0
# 使用循环计算 C(16, k) 并累加
for (k in 4:10) {
result <- result + choose(15, k)}
# 打印结果
print(result)
result <- 0
# 使用循环计算 C(16, k) 并累加
for (k in 4:10) {
result <- result + choose(16, k)}
# 打印结果
print(result)
result <- 0
# 使用循环计算 C(16, k) 并累加
for (k in 4:9) {
result <- result + choose(16, k)}
# 打印结果
print(result)
result <- 0
# 使用循环计算 C(16, k) 并累加
for (k in 4:6) {
result <- result + choose(16, k)}
# 打印结果
print(result)
result <- 0
# 使用循环计算 C(16, k) 并累加
for (k in 4:13) {
result <- result + choose(13, k)}
# 打印结果
print(result)
result <- 0
# 使用循环计算 C(16, k) 并累加
for (k in 4:10) {
result <- result + choose(16, k)}
# 打印结果
print(result)
sqrt(2.17605813901155E-06)
2.17605813901155E-06
sqrt(5.28512909242121E-06)
sqrt(2.95289001836189E-06)
sqrt(1.46264098790292E-06)
# 创建数据框
data <- data.frame(
Accuracy = c(0.92, 0.91, 0.8784496, 0.9152972, 0.918146721, 0.91927868, 0.919669007, 0.919122597, 0.933619221, 0.88786521, 0.8711506),
Robustness = c(0.002, 0.0022, 0.006079706, 0.001274334, 0.001806664, 0.001354326, 0.000670107, 0.001505945, 0.002907969, 0.009831455, 0.003823534),
Cost = c(1, 1.2, 1.4, 2, 6, 7, 7, 8, 10, 8, 5),
Useability = c(10, 10, 7, 5, 3, 4, 4, 4, 1, 1.2, 6)
)
# 归一化函数
normalize <- function(x) {
255*(x - min(x)) / (max(x) - min(x))
}
# 应用归一化函数到每列
normalized_data <- as.data.frame(lapply(data, normalize))
# 打印归一化后的数据框
print(normalized_data)
# Define the data frame
data <- data.frame(
Accuracy = c(0.92, 0.91, 0.8784496, 0.9152972, 0.918146721, 0.91927868, 0.919669007, 0.919122597, 0.933619221, 0.88786521, 0.8711506),
Robustness = c(0.002, 0.0022, 0.006079706, 0.001274334, 0.001806664, 0.001354326, 0.000670107, 0.001505945, 0.002907969, 0.009831455, 0.003823534),
Cost = c(1, 1.2, 1.4, 2, 6, 7, 7, 8, 10, 8, 5),
Useability = c(10, 10, 7, 5, 3, 4, 4, 4, 1, 1.2, 6)
)
# Normalize function
normalize <- function(x) {
return(((x - min(x)) / (max(x) - min(x)) * (1 - 0.4) + 0.4)*256)
}
# Apply normalization to each column
normalized_data <- as.data.frame(lapply(data, normalize))
# Print the normalized data
print(normalized_data)
# Define the data frame
data <- data.frame(
Accuracy = c(0.92, 0.91, 0.8784496, 0.9152972, 0.918146721, 0.91927868, 0.919669007, 0.919122597, 0.933619221, 0.88786521, 0.8711506),
Robustness = c(0.002, 0.0022, 0.006079706, 0.001274334, 0.001806664, 0.001354326, 0.000670107, 0.001505945, 0.002907969, 0.009831455, 0.003823534),
Cost = c(1, 1.2, 1.4, 2, 6, 7, 7, 8, 10, 8, 5),
Useability = c(10, 10, 7, 5, 3, 4, 4, 4, 1, 1.2, 6)
)
# Normalize function
normalize <- function(x) {
return(((x - min(x)) / (max(x) - min(x)) * (1 - 0.4) + 0.4)*255)
}
# Apply normalization to each column
normalized_data <- as.data.frame(lapply(data, normalize))
# Print the normalized data
print(normalized_data)
Accuracy = 1-c(0.92, 0.91, 0.8784496, 0.9152972, 0.918146721, 0.91927868, 0.919669007, 0.919122597, 0.933619221, 0.88786521, 0.8711506),
1-c(0.92, 0.91, 0.8784496, 0.9152972, 0.918146721, 0.91927868, 0.919669007, 0.919122597, 0.933619221, 0.88786521, 0.8711506)
# Define the data frame
data <- data.frame(
Accuracy = 1-c(0.92, 0.91, 0.8784496, 0.9152972, 0.918146721, 0.91927868, 0.919669007, 0.919122597, 0.933619221, 0.88786521, 0.8711506),
Robustness = c(0.002, 0.0022, 0.006079706, 0.001274334, 0.001806664, 0.001354326, 0.000670107, 0.001505945, 0.002907969, 0.009831455, 0.003823534),
Cost = c(1, 1.2, 1.4, 2, 6, 7, 7, 8, 10, 8, 5),
Useability = c(10, 10, 7, 5, 3, 4, 4, 4, 1, 1.2, 6)
)
# Normalize function
normalize <- function(x) {
return(255-((x - min(x)) / (max(x) - min(x)) * (1 - 0.4) + 0.4)*255)
}
# Apply normalization to each column
normalized_data <- as.data.frame(lapply(data, normalize))
# Print the normalized data
print(normalized_data)
# Define the data frame
data <- data.frame(
Accuracy = 1-c(0.92, 0.91, 0.8784496, 0.9152972, 0.918146721, 0.91927868, 0.919669007, 0.919122597, 0.933619221, 0.88786521, 0.8711506),
Robustness = c(0.002, 0.0022, 0.006079706, 0.001274334, 0.001806664, 0.001354326, 0.000670107, 0.001505945, 0.002907969, 0.009831455, 0.003823534),
Cost = c(1, 1.2, 1.4, 2, 6, 7, 7, 8, 10, 8, 5),
Useability = c(10, 10, 7, 5, 3, 4, 4, 4, 1, 1.2, 6)
)
# Normalize function
normalize <- function(x) {
return(((x - min(x)) / (max(x) - min(x)) * (1 - 0.4) + 0.4)*255)
}
# Apply normalization to each column
normalized_data <- as.data.frame(lapply(data, normalize))
# Print the normalized data
print(normalized_data)
# Define the data frame
data <- data.frame(
Accuracy = c(0.92, 0.91, 0.8784496, 0.9152972, 0.918146721, 0.91927868, 0.919669007, 0.919122597, 0.933619221, 0.88786521, 0.8711506),
Robustness = 1-c(0.002, 0.0022, 0.006079706, 0.001274334, 0.001806664, 0.001354326, 0.000670107, 0.001505945, 0.002907969, 0.009831455, 0.003823534),
Cost = 15-c(1, 1.2, 1.4, 2, 6, 7, 7, 8, 10, 8, 5),
Useability = c(10, 10, 7, 5, 3, 4, 4, 4, 1, 1.2, 6)
)
# Normalize function
normalize <- function(x) {
return(((x - min(x)) / (max(x) - min(x)) * (1 - 0.4) + 0.4)*255)
}
# Apply normalization to each column
normalized_data <- as.data.frame(lapply(data, normalize))
# Print the normalized data
print(normalized_data)
# 创建数据框
data <- data.frame(
Accuracy = c(0.92, 0.91, 0.8784496, 0.9152972, 0.918146721, 0.91927868, 0.919669007, 0.919122597, 0.933619221, 0.88786521, 0.8711506),
Robustness = 1-c(0.002, 0.0022, 0.006079706, 0.001274334, 0.001806664, 0.001354326, 0.000670107, 0.001505945, 0.002907969, 0.009831455, 0.003823534),
Cost = 15-c(1, 1.2, 1.4, 2, 6, 7, 7, 8, 10, 8, 5),
Useability = c(10, 10, 7, 5, 3, 4, 4, 4, 1, 1.2, 6)
)
# 归一化函数
normalize <- function(x) {
(x - min(x)) / (max(x) - min(x))
}
# 应用归一化函数到每列
normalized_data <- as.data.frame(lapply(data, normalize))
# 打印归一化后的数据框
print(normalized_data)
# 创建数据框
data <- data.frame(
Accuracy = c(0.92, 0.91, 0.8784496, 0.9152972, 0.918146721, 0.91927868, 0.919669007, 0.919122597, 0.933619221, 0.88786521, 0.8711506),
Robustness = 1-c(0.002, 0.0022, 0.006079706, 0.001274334, 0.001806664, 0.001354326, 0.000670107, 0.001505945, 0.002907969, 0.009831455, 0.003823534),
Cost = 15-c(1, 1.2, 1.4, 2, 6, 7, 7, 8, 10, 8, 5),
Useability = c(10, 10, 7, 5, 3, 4, 4, 4, 1, 1.2, 6)
)
# 归一化函数
normalize <- function(x) {
(x - min(x)) / (max(x) - min(x))
}
# 应用归一化函数到每列
normalized_data <- as.data.frame(lapply(data, normalize))
# 打印归一化后的数据框
print(normalized_data)
# arctan变换并放缩到120-255的范围
arctan_scale <- function(x) {
# 对数据进行arctan变换
arctan_values <- atan(x)
# 将arctan结果（范围在-pi/2到pi/2之间）归一化到0-1
normalized_arctan <- (arctan_values - min(arctan_values)) / (max(arctan_values) - min(arctan_values))
# 将0-1的值放缩到120-255
scaled_values <- 120 + normalized_arctan * (255 - 120)
return(scaled_values)
}
# 对normalized_data应用arctan变换和放缩
final_data <- as.data.frame(lapply(normalized_data, arctan_scale))
# 打印最终结果
print(final_data)
# 创建数据框
data <- data.frame(
Accuracy = c(0.92, 0.91, 0.8784496, 0.9152972, 0.918146721, 0.91927868, 0.919669007, 0.919122597, 0.933619221, 0.88786521, 0.8711506),
Robustness = 1-c(0.002, 0.0022, 0.006079706, 0.001274334, 0.001806664, 0.001354326, 0.000670107, 0.001505945, 0.002907969, 0.009831455, 0.003823534),
Cost = 10-c(1, 1.2, 1.4, 2, 6, 7, 7, 8, 10, 8, 5),
Useability = c(10, 10, 7, 5, 3, 4, 4, 4, 1, 1.2, 6)
)
# 归一化函数
normalize <- function(x) {
(x - min(x)) / (max(x) - min(x))
}
# 应用归一化函数到每列
normalized_data <- as.data.frame(lapply(data, normalize))
# 计算e次方并放缩到120-255范围
scale_exp <- function(x) {
# 计算e次方
exp_x <- exp(x)
# 放缩到120-255范围
scaled_x <- 120 + (255-120) * (exp_x - min(exp_x)) / (max(exp_x) - min(exp_x))
return(scaled_x)
}
# 应用转换函数到normalized_data的每列
scaled_data <- as.data.frame(lapply(normalized_data, scale_exp))
# 打印结果
print(scaled_data)
# 创建数据框
data <- data.frame(
Accuracy = c(0.864864, 0.871292, 0.8784496, 0.9152972, 0.918146721, 0.91927868, 0.919669007, 0.919122597, 0.933619221, 0.88786521, 0.8711506),
Robustness = 1-c(0.00216151104554198, 0.00221873161964218, 0.006079706, 0.001274334, 0.001806664, 0.001354326, 0.000670107, 0.001505945, 0.002907969, 0.009831455, 0.003823534),
Cost = 10-c(1, 1.2, 1.4, 2, 6, 7, 7, 8, 10, 8, 5),
Useability = c(10, 10, 7, 5, 3, 4, 4, 4, 1, 1.2, 6)
)
# 归一化函数
normalize <- function(x) {
(x - min(x)) / (max(x) - min(x))
}
# 应用归一化函数到每列
normalized_data <- as.data.frame(lapply(data, normalize))
# 计算e次方并放缩到120-255范围
scale_exp <- function(x) {
# 计算e次方
exp_x <- exp(x)
# 放缩到120-255范围
scaled_x <- 120 + (255-120) * (exp_x - min(exp_x)) / (max(exp_x) - min(exp_x))
return(scaled_x)
}
# 应用转换函数到normalized_data的每列
scaled_data <- as.data.frame(lapply(normalized_data, scale_exp))
# 打印结果
print(scaled_data)
setwd("C:/Users/shaok/Desktop")
setwd("C:/Users/shaok/Desktop")
setwd("D:/BaiduSyncdisk/Buffer/An Introduction to Generalized Linear Models/preview")
setwd("D:/BaiduSyncdisk/Buffer/An Introduction to Generalized Linear Models")
setwd("C:/Users/shaok/Desktop")
setwd("D:/Cache/Github/SRE_procedural_notes/Debugging_Notes")
