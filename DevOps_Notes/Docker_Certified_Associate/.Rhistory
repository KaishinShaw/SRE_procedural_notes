data <- data.frame(model, score = scores)
model_info <- data.frame(
model = models,
Color = c(
'#8074C8', '#7895C1', '#EAE936', '#EAB883', '#F0C284',
'#7ABBDB', '#A8CBDF', '#992224', '#9BBBE1',
'#B54764', '#E3625D', '#EF8B67'
),
Type = c(
'Traditional Statistical Models', 'Traditional Statistical Models',
'Deep Learning Models', 'Deep Learning Models', 'Deep Learning Models',
'Classical ML Models', 'Classical ML Models', 'Neighbor Learning Models',
'Classical ML Models', 'GBDT Models', 'GBDT Models', 'GBDT Models'
)
)
data <- merge(data, model_info, by = "model", all.x = TRUE)
means <- aggregate(score ~ model, data = data, FUN = mean)
means <- merge(means, model_info, by = "model", all.x = TRUE)
model_order <- unique(model_info[c("model", "Type")])
model_order <- model_order[order(model_order$Type), ]
new_model_order <- as.character(model_order$model)
data$model <- factor(data$model, levels = new_model_order)
means$model <- factor(means$model, levels = new_model_order)
p <- ggplot() +
geom_point(
data = data,
aes(x = model, y = score, color = Color, shape = Type),
size = 2,
alpha = 0.6
) +
geom_segment(
data = means,
aes(
x = as.numeric(model) - 0.2,
xend = as.numeric(model) + 0.2,
y = score,
yend = score,
color = Color
),
size = 1.5
) +
scale_y_continuous(
name = "Accuracy",
limits = c(0.83, 0.94),
breaks = seq(0.83, 0.94, by = 0.01)
) +
scale_color_identity() +
theme_bw() +
theme(
axis.text.x = element_text(angle = 45, hjust = 1),
panel.grid.minor = element_line(color = "grey90"),
panel.grid.major = element_line(color = "grey80"),
legend.position = "right",
plot.title = element_text(hjust = 0.5, size = 14, face = "bold"),
axis.title = element_text(size = 12),
axis.text = element_text(size = 10),
legend.title = element_text(size = 11),
legend.text = element_text(size = 10)
) +
labs(
title = "Model Performance Comparison",
x = "Model",
shape = "Model Type"
)
print(p)
library(ggplot2)
library(dplyr)
data <- data.frame(
Model = c(
"2-factor LogisticClassifier", "all-factor LogisticClassifier",
"CustomLinearClassifier", "SVC", "Random Forest",
"XGBoost", "CatBoost", "LightGBM", "TabularTransformer",
"TabPFN", "MLP", "KNN"
),
Accuracy = c(
0.8507748, 0.8927358,
0.8784496, 0.9152972, 0.918146721,
0.91927868, 0.919669007, 0.919122597, 0.933619221,
0.926952316, 0.88786521, 0.8711506
),
Robustness = c(
0.002643826, 0.002218732,
0.004605714, 0.001274334, 0.001806664,
0.001354326, 0.000670107, 0.001505945, 0.002907969,
0.004292173, 0.009831455, 0.003823534
)
)
color_groups <- c(
"Traditional Statistical Models", "Traditional Statistical Models",
"Classical ML Models", "Classical ML Models", "Classical ML Models",
"GBDT Models", "GBDT Models", "GBDT Models",
"Deep Learning Models", "Deep Learning Models", "Deep Learning Models",
"Neighbor Learning Models"
)
data$ColorGroup <- color_groups
data <- data %>%
mutate(Model = factor(Model, levels = Model[order(ColorGroup)]))
gg <- ggplot(data, aes(x = Model, fill = ColorGroup)) +
geom_bar(
aes(y = Accuracy),
stat = "identity"
) +
geom_point(
aes(y = Robustness * 100),
color = "#5681AC",
size = 1.2
) +
geom_line(
aes(y = Robustness * 100, group = 1),
color = "#5681AC",
size = 0.6
) +
scale_y_continuous(
name = "Accuracy",
sec.axis = sec_axis(~ . / 100, name = "Robustness")
) +
scale_fill_manual(
values = c(
"Traditional Statistical Models" = "#FEF0C1",
"Classical ML Models" = "#FFC080",
"GBDT Models" = "#FEA040",
"Deep Learning Models" = "#FF7F00",
"Neighbor Learning Models" = "#FF6100"
)
) +
theme(
axis.text.x = element_text(angle = 45, hjust = 1)
) +
labs(
title = "Model Performance: Accuracy and Robustness",
x = "Model",
fill = "Model Type"
)
print(gg)
# 加载必要的库
library(ggplot2)
# 读取CSV文件
train_data <- read.csv("C:/Users/shaok/Desktop/2024 SAS高校数据分析大赛复赛试题3-游戏用户留存度分析/train_cleaned_SAS.csv", stringsAsFactors = TRUE)
# 检查数据结构
str(train_data)
# 绘制箱线图
# 对ACHV列
ggplot(train_data, aes(x=Target, y=ACHV, fill=Target)) +
geom_boxplot() +
ggtitle("ACHV vs Target") +
xlab("Target") +
ylab("ACHV")
# 对ASD列
ggplot(train_data, aes(x=Target, y=ASD, fill=Target)) +
geom_boxplot() +
ggtitle("ASD vs Target") +
xlab("Target") +
ylab("ASD")
# 对Level列
ggplot(train_data, aes(x=Target, y=Level, fill=Target)) +
geom_boxplot() +
ggtitle("Level vs Target") +
xlab("Target") +
ylab("Level")
# 对SPK列
ggplot(train_data, aes(x=Target, y=SPK, fill=Target)) +
geom_boxplot() +
ggtitle("SPK vs Target") +
xlab("Target") +
ylab("SPK")
# 可以使用ggsave函数保存图像
# ggsave("plot.png")
# 读取数据
train_data <- read.csv("C:/Users/shaok/Desktop/2024 SAS高校数据分析大赛复赛试题3-游戏用户留存度分析/train_cleaned_SAS.csv")
# 加载ggplot2包用于绘图
library(ggplot2)
# 将数据从宽格式转换为长格式，便于绘制箱线图
library(tidyr)
long_data <- gather(train_data, key = "Variable", value = "Value", c("ACHV", "ASD", "Level", "SPK"))
# 绘制箱线图
ggplot(long_data, aes(x = Target, y = Value, fill = Target)) +
geom_boxplot() +
facet_wrap(~Variable, scales = "free_y") +  # 为每个变量创建单独的子图
theme_minimal() +
labs(title = "各变量在不同Target组的分布情况",
y = "值",
x = "Target分组") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
scale_fill_brewer(palette = "Set2")  # 使用颜色主题
# 读取数据
train_data <- read.csv("C:/Users/shaok/Desktop/2024 SAS高校数据分析大赛复赛试题3-游戏用户留存度分析/train_cleaned_SAS.csv")
# 将Target转换为因子，并指定水平顺序
train_data$Target <- factor(train_data$Target, levels = c("Low", "Medium", "High"))
# 加载ggplot2包用于绘图
library(ggplot2)
# 将数据从宽格式转换为长格式，便于绘制箱线图
library(tidyr)
long_data <- gather(train_data, key = "Variable", value = "Value", c("ACHV", "ASD", "Level", "SPK"))
# 绘制箱线图
ggplot(long_data, aes(x = Target, y = Value, fill = Target)) +
geom_boxplot() +
facet_wrap(~Variable, scales = "free_y") +  # 为每个变量创建单独的子图
theme_minimal() +
labs(title = "各变量在不同Target组的分布情况",
y = "值",
x = "Target分组") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
scale_fill_brewer(palette = "Set2")  # 使用颜色主题
# 将Target转换为因子，并指定水平顺序
train_data$Target <- factor(train_data$Target, levels = c("Low", "Medium", "High"))
# 加载ggplot2包用于绘图
library(ggplot2)
# 将数据从宽格式转换为长格式，便于绘制箱线图
library(tidyr)
long_data <- gather(train_data, key = "Variable", value = "Value", c("ACHV", "ASD", "Level", "SPK"))
# 绘制箱线图
ggplot(long_data, aes(x = Target, y = Value, fill = Target)) +
geom_boxplot() +
facet_wrap(~Variable, scales = "free_y") +  # 为每个变量创建单独的子图
theme_minimal() +
labs(title = "各变量在不同Target组的分布情况",
y = "值",
x = "Target分组") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
scale_fill_brewer(palette = "Set1")  # 使用颜色主题
# 将Target转换为因子，并指定水平顺序
train_data$Target <- factor(train_data$Target, levels = c("Low", "Medium", "High"))
# 加载ggplot2包用于绘图
library(ggplot2)
# 将数据从宽格式转换为长格式，便于绘制箱线图
library(tidyr)
long_data <- gather(train_data, key = "Variable", value = "Value", c("ACHV", "ASD", "Level", "SPK"))
# 绘制箱线图
ggplot(long_data, aes(x = Target, y = Value, fill = Target)) +
geom_boxplot() +
facet_wrap(~Variable, scales = "free_y") +  # 为每个变量创建单独的子图
theme_minimal() +
labs(title = "各变量在不同Target组的分布情况",
y = "值",
x = "Target分组") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
scale_fill_brewer(palette = "Set3")  # 使用颜色主题
# 加载ggplot2包用于绘图
library(ggplot2)
# 将数据从宽格式转换为长格式，便于绘制箱线图
library(tidyr)
long_data <- gather(train_data, key = "Variable", value = "Value", c("ACHV", "ASD", "Level", "SPK"))
# 绘制箱线图
ggplot(long_data, aes(x = Target, y = Value, fill = Target)) +
geom_boxplot() +
facet_wrap(~Variable, scales = "free_y") +  # 为每个变量创建单独的子图
theme_minimal() +
labs(title = "各变量在不同Target组的分布情况",
y = "值",
x = "Target分组") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
scale_fill_brewer(palette = "Set4")  # 使用颜色主题
# 绘制箱线图
ggplot(long_data, aes(x = Target, y = Value, fill = Target)) +
geom_boxplot() +
facet_wrap(~Variable, scales = "free_y") +  # 为每个变量创建单独的子图
theme_minimal() +
labs(title = "各变量在不同Target组的分布情况",
y = "值",
x = "Target分组") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
scale_fill_brewer(palette = "Set5")  # 使用颜色主题
# 读取数据
train_data <- read.csv("C:/Users/shaok/Desktop/2024 SAS高校数据分析大赛复赛试题3-游戏用户留存度分析/train_cleaned_SAS.csv")
# 将Target转换为因子，并指定水平顺序
train_data$Target <- factor(train_data$Target, levels = c("Low", "Medium", "High"))
# 加载ggplot2包和RColorBrewer包
library(ggplot2)
library(RColorBrewer)
# 获取Reds色板的三个颜色
red_colors <- brewer.pal(3, "Reds")
# 将数据从宽格式转换为长格式，便于绘制箱线图
library(tidyr)
long_data <- gather(train_data, key = "Variable", value = "Value", c("ACHV", "ASD", "Level", "SPK"))
# 绘制箱线图
ggplot(long_data, aes(x = Target, y = Value, fill = Target)) +
geom_boxplot() +
facet_wrap(~Variable, scales = "free_y") +  # 为每个变量创建单独的子图
theme_minimal() +
labs(title = "各变量在不同Target组的分布情况",
y = "值",
x = "Target分组") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
scale_fill_manual(values = red_colors)  # 使用Reds色板的三个颜色
# 读取数据
train_data <- read.csv("C:/Users/shaok/Desktop/2024 SAS高校数据分析大赛复赛试题3-游戏用户留存度分析/train_cleaned_SAS.csv")
# 将Target转换为因子，并指定水平顺序
train_data$Target <- factor(train_data$Target, levels = c("Low", "Medium", "High"))
# 加载ggplot2包和RColorBrewer包
library(ggplot2)
library(RColorBrewer)
# 获取Reds色板的三个颜色
red_colors <- brewer.pal(3, "Reds")
# 将数据从宽格式转换为长格式
library(tidyr)
long_data <- gather(train_data, key = "Variable", value = "Value", c("ACHV", "ASD", "Level", "SPK"))
# 基础绘图代码
base_plot <- ggplot(long_data, aes(x = Target, y = Value, fill = Target)) +
geom_boxplot() +
facet_wrap(~Variable, scales = "free_y") +
labs(title = "各变量在不同Target组的分布情况",
y = "值",
x = "Target分组") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
scale_fill_manual(values = red_colors)
# 不同主题选项：
# 1. 最简洁的主题
p1 <- base_plot + theme_minimal()
# 2. 经典主题
p2 <- base_plot + theme_classic()
# 3. 黑白主题
p3 <- base_plot + theme_bw()
# 4. 灰色主题
p4 <- base_plot + theme_gray()
# 5. 光明主题
p5 <- base_plot + theme_light()
# 6. 暗黑主题
p6 <- base_plot + theme_dark()
# 7. 无网格线的主题
p7 <- base_plot + theme_void()
# 8. 报纸风格主题
p8 <- base_plot + theme_linedraw()
p2
p4
p5
p1
p5
# 读取数据
train_data <- read.csv("C:/Users/shaok/Desktop/2024 SAS高校数据分析大赛复赛试题3-游戏用户留存度分析/train_cleaned_SAS.csv")
# 将Target转换为因子，并指定水平顺序
train_data$Target <- factor(train_data$Target, levels = c("Low", "Medium", "High"))
# 加载ggplot2包和RColorBrewer包
library(ggplot2)
library(RColorBrewer)
# 获取Reds色板的三个颜色
red_colors <- brewer.pal(3, "Reds")
# 将数据从宽格式转换为长格式
library(tidyr)
long_data <- gather(train_data, key = "Variable", value = "Value", c("ACHV", "ASD", "Level", "SPK"))
# 绘制箱线图
ggplot(long_data, aes(x = Target, y = Value, fill = Target)) +
geom_boxplot() +
facet_wrap(~Variable, scales = "free_y") +
theme_light() +
labs(title = "Distribution of Variables Across Different Target Groups",
y = "Value",
x = "Target Group",
fill = "Target Level") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
scale_fill_manual(values = red_colors)
setwd("D:/Cache/膀胱癌")
dir.create('RawMatrix/') # 新建文件夹存储下载的原始数据
tar_file <- ".\\gdc_download_20250117_125944.244661.tar.gz"
extract_dir <- ".\\RawMatrix"
untar(tar_file, exdir = extract_dir) # 导入tar.gz，并解压文件
dir.create('RawData/') # 新建文件夹存储count/TPM/差异表达矩阵等txt格式
dir.create('RawData/csv/') # 新建文件夹存储csv格式的矩阵
library(data.table)
library(dplyr)
sample_sheet <- fread("./gdc_sample_sheet.2025-02-11.tsv") # 读取样本信息
sample_sheet$Barcode <- substr(sample_sheet$`Sample ID`,1,15) # 取ID前15字符作为barcode
sample_sheet1 <- sample_sheet %>% filter(!duplicated(sample_sheet$Barcode)) # 去重
sample_sheet2 <- sample_sheet1 %>% filter(grepl("01$|11$|06$",sample_sheet1$Barcode)) # Barcode的最后两位：01表示肿瘤样本，11表示正常样本，06表示转移样本
TCGA_LIHC_Exp <- fread("./RawMatrix/0aacd6c6-c2cb-4304-8d2d-ff63e15629c2/cb8fa4e8-736f-4e98-98a7-5d6ea4dcb800.rna_seq.augmented_star_gene_counts.tsv") # 任意读取一个文件
TCGA_LIHC_Exp <- TCGA_LIHC_Exp[!1:4,c("gene_id","gene_name","gene_type")] # 创建包含"gene_id","gene_name","gene_type"的数据框，用于合并表达数据
### 将所有样本合并成一个数据框
### 将所有样本合并成一个数据框
for (i in 1:nrow(sample_sheet2)) {
folder_name <- sample_sheet2$`File ID`[i]
file_name <- sample_sheet2$`File Name`[i]
sample_name <- sample_sheet2$Barcode[i]
data1 <- fread(paste0("./RawMatrix/",folder_name,"/",file_name))
#unstranded代表count值；如果要保存TPM，则改为tpm_unstranded
data2 <- data1[!1:4,c("gene_id","gene_name","gene_type","unstranded")]
colnames(data2)[4] <- sample_name
TCGA_LIHC_Exp <- inner_join(TCGA_LIHC_Exp,data2)
}
### 根据需要的表达比例筛选满足条件的基因
zero_percentage <- rowMeans(TCGA_LIHC_Exp[, 4:ncol(TCGA_LIHC_Exp)] == 0)
TCGA_LIHC_Exp1 <- TCGA_LIHC_Exp[zero_percentage < 0.6, ] # 筛选出表达超过60%的基因
install.packages("BiocManager")
library(BiocManager)
BiocManager::install("edgeR")
library(BiocManager)
BiocManager::install("edgeR")
BiocManager::install("edgeR")
BiocManager::install("edgeR")
BiocManager::install("edgeR")
library(edgeR)
TCGA_LIHC_Exp1 = avereps(TCGA_LIHC_Exp[,-c(1:3)],ID = TCGA_LIHC_Exp$gene_name) # 对重复基因名取平均表达量，并将基因名作为行名
TCGA_LIHC_Exp1 <- TCGA_LIHC_Exp1[rowMeans(TCGA_LIHC_Exp1)>100,] # 根据需要去除低表达基因，这里设置的平均表达量100为阈值
### 创建样本分组
install.packages("stringr")
library(stringr)
tumor <- colnames(TCGA_LIHC_Exp1)[substr(colnames(TCGA_LIHC_Exp1),14,15) == "01"]
normal <- colnames(TCGA_LIHC_Exp1)[substr(colnames(TCGA_LIHC_Exp1),14,15) == "11"]
tumor_sample <- TCGA_LIHC_Exp1[,tumor]
normal_sample <- TCGA_LIHC_Exp1[,normal]
exprSet_by_group <- cbind(tumor_sample,normal_sample)
gene_name <- rownames(exprSet_by_group)
exprSet <- cbind(gene_name, exprSet_by_group)  # 将gene_name列设置为数据框的行名，合并后又添加一列基因名
### 存储counts和TPM数据
fwrite(exprSet,"./RawData/TCGA_BLCA_Count.txt") # txt格式
library(data.table)
library(data.table)
library(edgeR)
group_list <- c(rep('tumor',ncol(tumor_sample)),rep('normal',ncol(normal_sample)))
group_list <- factor(group_list)
design <- model.matrix(~0+group_list)
rownames(design) <- colnames(exprSet_by_group)
colnames(design) <- levels(group_list) # 创建分组
# 创建一个DGEList对象，用于存储差异表达分析所需的数据
DGElist <- DGEList(counts = exprSet_by_group, group = group_list)
# 使用cpm值对低表达量的基因进行过滤。
keep_gene <- rowSums(cpm(DGElist) > 1 ) >= 2
DGElist <- DGElist[keep_gene, keep.lib.sizes = FALSE] # 保留符合条件的基因
# 校正测序深度
DGElist <- calcNormFactors( DGElist )
# 估算离散度，该步骤会对DGElist进行添加或更新，一般看CommonDisp就行
DGElist <- estimateGLMCommonDisp(DGElist, design) # 共同离散度
DGElist <- estimateGLMTrendedDisp(DGElist, design) # 趋势离散度
DGElist <- estimateGLMTagwiseDisp(DGElist, design) # 基因特异的离散度
# 拟合广义线性模型
fit <- glmFit(DGElist, design) # 偏离分布模型的基因即差异表达基因DEGs
results <- glmLRT(fit, contrast = c(-1, 1)) # 似然比检验，contrast = c(-1, 1)即对分组的两个条件检验，这里是tumor和normal
# 提取差异表达的top基因
BLCA_nrDEG_edgeR <- topTags(results, n = nrow(DGElist)) # n = nrow(DGElist)即全部保存
BLCA_nrDEG_edgeR <- as.data.frame(BLCA_nrDEG_edgeR)
fwrite(BLCA_nrDEG_edgeR,"./RawData\\BLCA_nrDEG_edgeR.txt", row.names = TRUE) # csv格式
write.csv(BLCA_nrDEG_edgeR, "./RawData/csv/BLCA_nrDEG_edgeR.csv", row.names = T) # csv格式
# 筛选差异基因
library(data.table)
library(dplyr)
BLCA_Match_DEG <- read.csv("./RawData/csv/BLCA_nrDEG_edgeR.csv") # 或者从输出的文件里读取
BLCA_Match_DEG$log10FDR <- -log10(BLCA_Match_DEG$FDR)
colnames(BLCA_Match_DEG)[1] <- "gene_name"
BLCA_Match_DEG <- BLCA_Match_DEG %>%
mutate(DEG = case_when(logFC > 2 & FDR < 0.05 ~ "Up",
abs(logFC) < 2 | FDR > 0.05 ~ "None",
logFC < -2 & FDR < 0.05 ~ "Down")) # 打标签：logFC > 2 & FDR < 0.05：上调基因，logFC < -2 & FDR < 0.05：下调基因，其它认为无显著差异
# 保存添加标签后的基因
fwrite(BLCA_Match_DEG,"./RawData/BLCA_Match_DEG.txt") # txt格式
write.csv(BLCA_Match_DEG, "./RawData/csv/BLCA_Match_DEG.csv", row.names = F) # csv格式
### 根据需要的表达比例筛选满足条件的基因
zero_percentage <- rowMeans(TCGA_LIHC_Exp[, 4:ncol(TCGA_LIHC_Exp)] == 0)
TCGA_LIHC_Exp1 <- TCGA_LIHC_Exp[zero_percentage < 0.6, ]
# 对重复基因名取平均表达量
library(edgeR)
TCGA_LIHC_Exp1 <- avereps(TCGA_LIHC_Exp[,-c(1:3)], ID = TCGA_LIHC_Exp$gene_name)
# 过滤低表达基因
TCGA_LIHC_Exp1 <- TCGA_LIHC_Exp1[rowMeans(TCGA_LIHC_Exp1) > 100, ]
# 筛选衰老相关基因
senescence_genes <- c(
"CDK4", "CDKN1A", "CDKN2A", "E2F1", "E2F2", "E2F3",
"HRAS", "CXCL8", "KRAS", "MDM2", "MYC", "NRAS",
"MAPK1", "MAPK3", "MAP2K1", "MAP2K2", "RAF1", "RB1", "CCND1", "TP53"
)
TCGA_LIHC_Exp1 <- TCGA_LIHC_Exp1[rownames(TCGA_LIHC_Exp1) %in% senescence_genes, ]
### 创建样本分组（后续代码无需修改）
library(stringr)
tumor <- colnames(TCGA_LIHC_Exp1)[substr(colnames(TCGA_LIHC_Exp1),14,15) == "01"]
normal <- colnames(TCGA_LIHC_Exp1)[substr(colnames(TCGA_LIHC_Exp1),14,15) == "11"]
tumor_sample <- TCGA_LIHC_Exp1[, tumor]
normal_sample <- TCGA_LIHC_Exp1[, normal]
exprSet_by_group <- cbind(tumor_sample, normal_sample)
gene_name <- rownames(exprSet_by_group)
exprSet <- cbind(gene_name, exprSet_by_group)  # 将gene_name列设置为数据框的行名，合并后又添加一列基因名
### 存储counts和TPM数据
fwrite(exprSet,"./RawData/TCGA_BLCA_Count.txt") # txt格式
write.csv(exprSet, "./RawData/csv/TCGA_BLCA_Count.csv", row.names = FALSE) # csv格式
fwrite(exprSet,"./RawData/TCGA_BLCA_Tpm.txt") # txt格式
write.csv(exprSet, "./RawData/csv/TCGA_BLCA_Tpm.csv", row.names = FALSE) # csv格式
library(data.table)
library(edgeR)
group_list <- c(rep('tumor',ncol(tumor_sample)),rep('normal',ncol(normal_sample)))
group_list <- factor(group_list)
design <- model.matrix(~0+group_list)
rownames(design) <- colnames(exprSet_by_group)
colnames(design) <- levels(group_list) # 创建分组
# 创建一个DGEList对象，用于存储差异表达分析所需的数据
DGElist <- DGEList(counts = exprSet_by_group, group = group_list)
# 使用cpm值对低表达量的基因进行过滤。
keep_gene <- rowSums(cpm(DGElist) > 1 ) >= 2
DGElist <- DGElist[keep_gene, keep.lib.sizes = FALSE] # 保留符合条件的基因
# 校正测序深度
DGElist <- calcNormFactors( DGElist )
# 估算离散度，该步骤会对DGElist进行添加或更新，一般看CommonDisp就行
DGElist <- estimateGLMCommonDisp(DGElist, design) # 共同离散度
DGElist <- estimateGLMTrendedDisp(DGElist, design) # 趋势离散度
DGElist <- estimateGLMTagwiseDisp(DGElist, design) # 基因特异的离散度
# 拟合广义线性模型
fit <- glmFit(DGElist, design) # 偏离分布模型的基因即差异表达基因DEGs
results <- glmLRT(fit, contrast = c(-1, 1)) # 似然比检验，contrast = c(-1, 1)即对分组的两个条件检验，这里是tumor和normal
# 提取差异表达的top基因
BLCA_nrDEG_edgeR <- topTags(results, n = nrow(DGElist)) # n = nrow(DGElist)即全部保存
BLCA_nrDEG_edgeR <- as.data.frame(BLCA_nrDEG_edgeR)
fwrite(BLCA_nrDEG_edgeR,"./RawData\\BLCA_nrDEG_edgeR.txt", row.names = TRUE) # csv格式
write.csv(BLCA_nrDEG_edgeR, "./RawData/csv/BLCA_nrDEG_edgeR.csv", row.names = T) # csv格式
# 筛选差异基因
library(data.table)
library(dplyr)
BLCA_Match_DEG <- read.csv("./RawData/csv/BLCA_nrDEG_edgeR.csv") # 或者从输出的文件里读取
BLCA_Match_DEG$log10FDR <- -log10(BLCA_Match_DEG$FDR)
colnames(BLCA_Match_DEG)[1] <- "gene_name"
BLCA_Match_DEG <- BLCA_Match_DEG %>%
mutate(DEG = case_when(logFC > 2 & FDR < 0.05 ~ "Up",
abs(logFC) < 2 | FDR > 0.05 ~ "None",
logFC < -2 & FDR < 0.05 ~ "Down")) # 打标签：logFC > 2 & FDR < 0.05：上调基因，logFC < -2 & FDR < 0.05：下调基因，其它认为无显著差异
# 保存添加标签后的基因
fwrite(BLCA_Match_DEG,"./RawData/BLCA_Match_DEG.txt") # txt格式
write.csv(BLCA_Match_DEG, "./RawData/csv/BLCA_Match_DEG.csv", row.names = F) # csv格式
setwd("G:/Coding/procedural_notes/DevOps_Notes/Docker_Certified_Associate")
