grp = thin$grp
} else {
thin <- unique(data.frame(pvalues = round(pvalues, thin.obs.places),
exp.x = round(exp.x, thin.exp.places)))
}
pvalues <- thin$pvalues
exp.x <- thin$exp.x
}
gc()
prepanel.qqunif= function(x,y,...) {
A = list()
A$xlim = range(x, y)*1.02
A$xlim[1]=0
A$ylim = A$xlim
return(A)
}
#draw the plot
xyplot(pvalues~exp.x, groups=grp, xlab=xlab, ylab=ylab, aspect=aspect,
prepanel=prepanel, scales=list(axs="i"), pch=pch,
panel = function(x, y, ...) {
if (draw.conf) {
panel.qqconf(n, conf.points=conf.points,
conf.col=conf.col, conf.alpha=conf.alpha)
};
panel.xyplot(x,y, ...);
panel.abline(0,1);
}, par.settings=par.settings, ...
)
}
qqunif.plot(my.pvalues) #these are the raw p-values, not log-transformed
my.pvalue.list<-list("Study 1"=runif(10000), "Study 2"=runif(10000,0,.90))
qqunif.plot(my.pvalue.list, auto.key=list(corner=c(.95,.05)))
View(my.pvalue.list)
View(my.pvalue.list)
View(my.pvalue.list)
# 读取CSV文件
cleaned_data <- read.csv("C:/Users/shaok/Desktop/Delete_0727_desktop/train_cleaned_Cb.csv")
# 创建列表
result_list <- list(
"SPK_Low" = cleaned_data$SPK[cleaned_data$Target == "Low"],
"SPK_Medium" = cleaned_data$SPK[cleaned_data$Target == "Medium"],
"SPK_High" = cleaned_data$SPK[cleaned_data$Target == "High"]
)
qqunif.plot(result_list, auto.key=list(corner=c(.95,.05)))
View(result_list)
result_list <- lapply(result_list, as.double)
# my.pvalue.list<-list("Study 1"=runif(10000), "Study 2"=runif(10000,0,.90))
qqunif.plot(result_list, auto.key=list(corner=c(.95,.05)))
cleaned_data <- read.csv("C:/Users/shaok/Desktop/Delete_0727_desktop/train_cleaned_Cb.csv")
cleaned_data$SPK <- scale(cleaned_data$SPK)
# 创建列表
result_list <- list(
"SPK_Low" = cleaned_data$SPK[cleaned_data$Target == "Low"],
"SPK_Medium" = cleaned_data$SPK[cleaned_data$Target == "Medium"],
"SPK_High" = cleaned_data$SPK[cleaned_data$Target == "High"]
)
result_list <- lapply(result_list, as.double)
# my.pvalue.list<-list("Study 1"=runif(10000), "Study 2"=runif(10000,0,.90))
qqunif.plot(result_list, auto.key=list(corner=c(.95,.05)))
cleaned_data <- read.csv("C:/Users/shaok/Desktop/Delete_0727_desktop/train_cleaned_Cb.csv")
cleaned_data$SPK <- scale(cleaned_data$SPK, center = min(cleaned_data$SPK), scale = max(cleaned_data$SPK) - min(cleaned_data$SPK))
# 创建列表
result_list <- list(
"SPK_Low" = cleaned_data$SPK[cleaned_data$Target == "Low"],
"SPK_Medium" = cleaned_data$SPK[cleaned_data$Target == "Medium"],
"SPK_High" = cleaned_data$SPK[cleaned_data$Target == "High"]
)
result_list <- lapply(result_list, as.double)
# my.pvalue.list<-list("Study 1"=runif(10000), "Study 2"=runif(10000,0,.90))
qqunif.plot(result_list, auto.key=list(corner=c(.95,.05)))
View(result_list)
my.pvalue.list<-list("Study 1"=runif(10000), "Study 2"=runif(10000,0,.90))
qqunif.plot(result_list, auto.key=list(corner=c(.95,.05)))
qqunif.plot(my.pvalue.list, auto.key=list(corner=c(.95,.05)))
# 读取CSV文件
cleaned_data <- read.csv("C:/Users/shaok/Desktop/Delete_0727_desktop/train_cleaned_Cb.csv")
cleaned_data$SPK <- scale(cleaned_data$SPK, center = min(cleaned_data$SPK), scale = max(cleaned_data$SPK) - min(cleaned_data$SPK))
cleaned_data <- subset(cleaned_data, SPK != 0)
# 创建列表
result_list <- list(
"SPK_Low" = cleaned_data$SPK[cleaned_data$Target == "Low"],
"SPK_Medium" = cleaned_data$SPK[cleaned_data$Target == "Medium"],
"SPK_High" = cleaned_data$SPK[cleaned_data$Target == "High"]
)
result_list <- lapply(result_list, as.double)
qqunif.plot(result_list, auto.key=list(corner=c(.95,.05)))
# 读取CSV文件
cleaned_data <- read.csv("C:/Users/shaok/Desktop/Delete_0727_desktop/train_cleaned_Cb.csv")
# 创建列表
result_list <- list(
"SPK_Low" = cleaned_data$SPK[cleaned_data$Target == "Low"],
"SPK_Medium" = cleaned_data$SPK[cleaned_data$Target == "Medium"],
"SPK_High" = cleaned_data$SPK[cleaned_data$Target == "High"]
)
result_list <- lapply(result_list, as.double)
qqunif.plot(result_list, auto.key=list(corner=c(.95,.05)))
# 读取CSV文件
cleaned_data <- read.csv("C:/Users/shaok/Desktop/Delete_0727_desktop/train_cleaned_Cb.csv")
cleaned_data$SPK <- scale(cleaned_data$SPK, center = min(cleaned_data$SPK), scale = max(cleaned_data$SPK) - min(cleaned_data$SPK))
cleaned_data <- subset(cleaned_data, SPK != 0)
# 创建列表
result_list <- list(
"SPK_Low" = cleaned_data$SPK[cleaned_data$Target == "Low"],
"SPK_Medium" = cleaned_data$SPK[cleaned_data$Target == "Medium"],
"SPK_High" = cleaned_data$SPK[cleaned_data$Target == "High"]
)
result_list <- lapply(result_list, as.double)
qqunif.plot(result_list, auto.key=list(corner=c(.95,.05)))
# 读取CSV文件
cleaned_data <- read.csv("C:/Users/shaok/Desktop/Delete_0727_desktop/train_cleaned_Cb.csv")
cleaned_data$SPK <- scale(cleaned_data$SPK, center = min(cleaned_data$SPK), scale = max(cleaned_data$SPK) - min(cleaned_data$SPK))
cleaned_data$SPK <- 10^(-cleaned_data$SPK)
# 创建列表
result_list <- list(
"SPK_Low" = cleaned_data$SPK[cleaned_data$Target == "Low"],
"SPK_Medium" = cleaned_data$SPK[cleaned_data$Target == "Medium"],
"SPK_High" = cleaned_data$SPK[cleaned_data$Target == "High"]
)
result_list <- lapply(result_list, as.double)
qqunif.plot(result_list, auto.key=list(corner=c(.95,.05)))
# 读取CSV文件
cleaned_data <- read.csv("C:/Users/shaok/Desktop/Delete_0727_desktop/train_cleaned_Cb.csv")
cleaned_data$SPK <- scale(cleaned_data$SPK, center = min(cleaned_data$SPK), scale = max(cleaned_data$SPK) - min(cleaned_data$SPK))
cleaned_data <- subset(cleaned_data, SPK != 0)
# 创建列表
result_list <- list(
"SPK_Low" = cleaned_data$SPK[cleaned_data$Target == "Low"],
"SPK_Medium" = cleaned_data$SPK[cleaned_data$Target == "Medium"],
"SPK_High" = cleaned_data$SPK[cleaned_data$Target == "High"]
)
result_list <- lapply(result_list, as.double)
qqunif.plot(result_list, auto.key=list(corner=c(.95,.05)))
# 读取CSV文件
cleaned_data <- read.csv("C:/Users/shaok/Desktop/Delete_0727_desktop/train_cleaned_Cb.csv")
cleaned_data$Level <- scale(cleaned_data$Level, center = min(cleaned_data$Level), scale = max(cleaned_data$Level) - min(cleaned_data$Level))
cleaned_data <- subset(cleaned_data, Level != 0)
创建列表
# 创建列表
result_list <- list(
"Level_Low" = cleaned_data$Level[cleaned_data$Target == "Low"],
"Level_Medium" = cleaned_data$Level[cleaned_data$Target == "Medium"],
"Level_High" = cleaned_data$Level[cleaned_data$Target == "High"]
)
# 创建列表
result_list <- lapply(result_list, as.double)
qqunif.plot(result_list, auto.key=list(corner=c(.95,.05)))
data("barley", package = "lattice")
ggplot(
data = barley,
mapping = aes(
sample = yield,
color = site,
fill = site
)
) +
stat_qq_band(alpha = 0.5) +
stat_qq_line() +
stat_qq_point() +
ggsci::scale_color_nejm() +
ggsci::scale_fill_nejm() +
facet_wrap(~site) +
theme_bw(base_size = 20)
library(ggsci)
data("barley", package = "lattice")
ggplot(
data = barley,
mapping = aes(
sample = yield,
color = site,
fill = site
)
) +
stat_qq_band(alpha = 0.5) +
stat_qq_line() +
stat_qq_point() +
ggsci::scale_color_nejm() +
ggsci::scale_fill_nejm() +
facet_wrap(~site) +
theme_bw(base_size = 20)
# 确保加载了必要的包
library(ggplot2)
library(ggsci)  # 用于颜色方案
# 加载数据
data("barley", package = "lattice")
# 使用 ggplot 创建 QQ 图
ggplot(barley, aes(sample = yield, color = site, fill = site)) +
geom_qq(alpha = 0.5) +  # 使用 geom_qq 添加 QQ 图中的点，设置透明度
geom_qq_line() +  # 添加 QQ 线
scale_color_nejm() +  # 应用 NEJM 颜色方案
scale_fill_nejm() +  # 应用 NEJM 填充颜色方案
facet_wrap(~site) +  # 按地点分面
theme_bw(base_size = 20)  # 应用黑白主题，设置基本字体大小
# 确保加载了必要的包
library(ggplot2)
library(ggsci)  # 用于颜色方案
# 加载数据
data("barley", package = "lattice")
# 使用 ggplot 创建 QQ 图
ggplot(barley, aes(sample = yield, color = site, fill = site)) +
geom_qq(alpha = 0.5) +  # 使用 geom_qq 添加 QQ 图中的点，设置透明度
geom_qq_line() +  # 添加 QQ 线
scale_color_nejm() +  # 应用 NEJM 颜色方案
scale_fill_nejm() +  # 应用 NEJM 填充颜色方案
facet_wrap(~site) +  # 按地点分面
theme_bw(base_size = 20)  # 应用黑白主题，设置基本字体大小
View(barley)
cleaned_data <- read.csv("C:/Users/shaok/Desktop/Delete_0727_desktop/train_cleaned_Cb.csv")
# 确保加载了必要的包
library(ggplot2)
library(ggsci)  # 用于颜色方案
# 读取数据
cleaned_data <- read.csv("C:/Users/shaok/Desktop/Delete_0727_desktop/train_cleaned_Cb.csv")
# 验证数据中是否包含 'SPK' 和 'Target' 列
if (!("SPK" %in% names(cleaned_data)) || !("Target" %in% names(cleaned_data))) {
stop("数据中缺少必要的列。请检查 'SPK' 和 'Target' 列是否存在。")
}
# 使用 ggplot 创建 QQ 图
ggplot(cleaned_data, aes(sample = SPK, color = Target, fill = Target)) +
geom_qq(alpha = 0.5) +  # 使用 geom_qq 添加 QQ 图中的点，设置透明度
geom_qq_line() +  # 添加 QQ 线
scale_color_nejm() +  # 应用 NEJM 颜色方案
scale_fill_nejm() +  # 应用 NEJM 填充颜色方案
facet_wrap(~Target) +  # 按 Target 列值分面
theme_bw(base_size = 20)  # 应用黑白主题，设置基本字体大小
library(ggplot2)
library(dplyr)
library(purrr)
library(ggsci)
# 读取数据
cleaned_data <- read.csv("C:/Users/shaok/Desktop/Delete_0727_desktop/train_cleaned_Cb.csv")
# 计算分位数和置信区间
calculate_ci <- function(data, probs, n_sims = 1000) {
sims <- replicate(n_sims, quantile(sample(data, replace = TRUE), probs = probs))
data.frame(
lower = apply(sims, 1, quantile, probs = 0.025),
upper = apply(sims, 1, quantile, probs = 0.975),
probs = probs
)
}
probs <- seq(0.05, 0.95, by = 0.05)
ci_data <- cleaned_data %>%
group_by(Target) %>%
summarise(ci = list(calculate_ci(SPK, probs = probs)), .groups = "drop") %>%
unnest(ci)
library(qqplotr)
install.packages('qqplotr')
library(qqplotr)
library(ggplot2)
library(ggsci)
# 对于第一个示例（barley数据）
ggplot(barley, aes(sample = yield, color = site, fill = site)) +
stat_qq_band(alpha = 0.3, conf = 0.95) +  # 添加95%置信区间带
stat_qq_line() +  # QQ线
stat_qq_point(alpha = 0.5) +  # QQ点
scale_color_nejm() +
scale_fill_nejm() +
facet_wrap(~site) +
theme_bw(base_size = 20) +
labs(title = "QQ Plot with 95% Confidence Bands")
library(qqplotr)
# 验证数据中是否包含 'SPK' 和 'Target' 列
if (!("SPK" %in% names(cleaned_data)) || !("Target" %in% names(cleaned_data))) {
stop("数据中缺少必要的列。请检查 'SPK' 和 'Target' 列是否存在。")
}
# 使用 ggplot 创建 QQ 图
ggplot(cleaned_data, aes(sample = SPK, color = Target, fill = Target)) +
geom_qq(alpha = 0.5) +  # 使用 geom_qq 添加 QQ 图中的点，设置透明度
stat_qq_line() +  # 添加 QQ 线，使用 qqplotr 包
stat_qq_band(alpha = 0.2) +  # 添加置信区间带
scale_color_nejm() +  # 应用 NEJM 颜色方案
scale_fill_nejm() +  # 应用 NEJM 填充颜色方案
facet_wrap(~Target) +  # 按 Target 列值分面
theme_bw(base_size = 20)  # 应用黑白主题，设置基本字体大小
library(ggplot2)
library(ggsci)  # 用于颜色方案
# 读取数据
cleaned_data <- read.csv("C:/Users/shaok/Desktop/Delete_0727_desktop/train_cleaned_Cb.csv")
# 验证数据中是否包含 'SPK' 和 'Target' 列
if (!("SPK" %in% names(cleaned_data)) || !("Target" %in% names(cleaned_data))) {
stop("数据中缺少必要的列。请检查 'SPK' 和 'Target' 列是否存在。")
}
# 使用 ggplot 创建 QQ 图
ggplot(cleaned_data, aes(sample = SPK, color = Target, fill = Target)) +
geom_qq(alpha = 0.5) +  # 使用 geom_qq 添加 QQ 图中的点，设置透明度
geom_qq_line() +  # 添加 QQ 线
scale_color_nejm() +  # 应用 NEJM 颜色方案
scale_fill_nejm() +  # 应用 NEJM 填充颜色方案
facet_wrap(~Target) +  # 按 Target 列值分面
theme_bw(base_size = 20)  # 应用黑白主题，设置基本字体大小
library(ggplot2)
library(ggsci)  # 用于颜色方案
# 读取数据
cleaned_data <- read.csv("C:/Users/shaok/Desktop/Delete_0727_desktop/train_cleaned_Cb.csv")
# 验证数据中是否包含 'SPK' 和 'Target' 列
if (!("SPK" %in% names(cleaned_data)) || !("Target" %in% names(cleaned_data))) {
stop("数据中缺少必要的列。请检查 'SPK' 和 'Target' 列是否存在。")
}
# 使用 ggplot 创建 QQ 图，并添加置信区间
ggplot(cleaned_data, aes(sample = SPK, color = Target, fill = Target)) +
geom_qq(alpha = 0.5) +  # 添加 QQ 图中的点，设置透明度
geom_qq_line() +  # 添加 QQ 线
geom_smooth(method = "lm", se = TRUE, aes(group = Target), color = "black") +  # 添加线性模型趋势线和置信区间
scale_color_nejm() +  # 应用 NEJM 颜色方案
scale_fill_nejm() +  # 应用 NEJM 填充颜色方案
facet_wrap(~Target) +  # 按 Target 列值分面
theme_bw(base_size = 20)  # 应用黑白主题，设置基本字体大小
library(ggplot2)
library(ggsci)
library(qqplotr)  # 添加qqplotr包用于置信区间
# 读取数据
cleaned_data <- read.csv("C:/Users/shaok/Desktop/Delete_0727_desktop/train_cleaned_Cb.csv")
# 验证数据
if (!("SPK" %in% names(cleaned_data)) || !("Target" %in% names(cleaned_data))) {
stop("数据中缺少必要的列。请检查 'SPK' 和 'Target' 列是否存在。")
}
# 创建带置信区间的QQ图
ggplot(cleaned_data, aes(sample = SPK, color = Target, fill = Target)) +
stat_qq_band(alpha = 0.3, conf = 0.95, qtype = 1) +  # 添加95%置信区间带
stat_qq_line(identity = TRUE) +  # 添加QQ线
stat_qq_point(alpha = 0.5) +  # 添加QQ点
scale_color_nejm() +
scale_fill_nejm() +
facet_wrap(~Target) +
theme_bw(base_size = 20) +
labs(title = "QQ Plot with 95% Confidence Bands",
x = "Theoretical Quantiles",
y = "Sample Quantiles")
# 确保加载了必要的包
library(ggplot2)
library(ggsci)  # 用于颜色方案
# 加载数据
data("barley", package = "lattice")
# 使用 ggplot 创建 QQ 图
ggplot(barley, aes(sample = yield, color = site, fill = site)) +
geom_qq(alpha = 0.5) +  # 使用 geom_qq 添加 QQ 图中的点，设置透明度
geom_qq_line() +  # 添加 QQ 线
scale_color_nejm() +  # 应用 NEJM 颜色方案
scale_fill_nejm() +  # 应用 NEJM 填充颜色方案
facet_wrap(~site) +  # 按地点分面
theme_bw(base_size = 20)  # 应用黑白主题，设置基本字体大小
data("barley", package = "lattice")
ggplot(
data = barley,
mapping = aes(
sample = yield,
color = site,
fill = site
)
) +
stat_qq_band(alpha = 0.5) +
stat_qq_line() +
stat_qq_point() +
ggsci::scale_color_nejm() +
ggsci::scale_fill_nejm() +
facet_wrap(~site) +
theme_bw(base_size = 20)
# Load data
data("barley", package = "lattice")
# Create QQ plot with facets
ggplot(
data = barley,
mapping = aes(
sample = yield,
color = site,
fill = site
)
) +
stat_qq_band(alpha = 0.5) +
stat_qq_line() +
stat_qq_point() +
ggsci::scale_color_nejm() +
ggsci::scale_fill_nejm() +
facet_wrap(~ site) +
labs(
x = "Theoretical Quantiles",
y = "Sample Quantiles",
title = "Example of <span style='color:#D20F26'>qqplotr::stat_qq_point__* function</span>",
subtitle = "processed charts with <span style='color:#1A73E8'>stat__qq_point__*()</span>",
caption = "Visualization by <span style='color:#0057FF'>DataCharm</span>"
) +
hrbrthemes::theme_ipsum(base_family = "Roboto Condensed") +
theme(
plot.title = element_markdown(
hjust = 0.5,
vjust = 0.5,
color = "black",
size = 20,
margin = margin(t = 1, b = 12)
),
plot.subtitle = element_markdown(
hjust = 0,
vjust = 0.5,
size = 15
),
plot.caption = element_markdown(
face = 'bold',
size = 12
)
)
install.packages('hrbrthemes')
library('hrbrthemes')
# Load data
data("barley", package = "lattice")
# Create QQ plot with facets
ggplot(
data = barley,
mapping = aes(
sample = yield,
color = site,
fill = site
)
) +
stat_qq_band(alpha = 0.5) +
stat_qq_line() +
stat_qq_point() +
ggsci::scale_color_nejm() +
ggsci::scale_fill_nejm() +
facet_wrap(~ site) +
labs(
x = "Theoretical Quantiles",
y = "Sample Quantiles",
title = "Example of <span style='color:#D20F26'>qqplotr::stat_qq_point__* function</span>",
subtitle = "processed charts with <span style='color:#1A73E8'>stat__qq_point__*()</span>",
caption = "Visualization by <span style='color:#0057FF'>DataCharm</span>"
) +
hrbrthemes::theme_ipsum(base_family = "Roboto Condensed") +
theme(
plot.title = element_markdown(
hjust = 0.5,
vjust = 0.5,
color = "black",
size = 20,
margin = margin(t = 1, b = 12)
),
plot.subtitle = element_markdown(
hjust = 0,
vjust = 0.5,
size = 15
),
plot.caption = element_markdown(
face = 'bold',
size = 12
)
)
# install.packages("lattice")
data("barley", package = "lattice")
gg <- ggplot(data = barley, mapping = aes(sample = yield, color = site, fill = site)) +
stat_qq_band(alpha=0.5) +
stat_qq_line() +
stat_qq_point() +
facet_wrap(~ site) +
labs(x = "Theoretical Quantiles", y = "Sample Quantiles")
gg
library(ggplot2)
# install.packages("lattice")
data("barley", package = "lattice")
gg <- ggplot(data = barley, mapping = aes(sample = yield, color = site, fill = site)) +
stat_qq_band(alpha=0.5) +
stat_qq_line() +
stat_qq_point() +
facet_wrap(~ site) +
labs(x = "Theoretical Quantiles", y = "Sample Quantiles")
gg
install.packages('ggplot2')
install.packages("ggplot2")
# 加载所需的库
library(ggplot2)
require(qqplotr)
# 读取数据
cleaned_data <- read.csv("C:/Users/shaok/Desktop/Delete_0727_desktop/train_cleaned_Cb.csv")
# 检查 Target 列和 SPK 列是否存在
if (!("Target" %in% names(cleaned_data)) || !("SPK" %in% names(cleaned_data))) {
stop("Data must contain 'SPK' and 'Target' columns")
}
# 使用 ggplot2 绘制 QQ 图
gg <- ggplot(data = cleaned_data, mapping = aes(sample = SPK, color = Target, fill = Target)) +
stat_qq_band(alpha = 0.5) +  # 添加置信带
stat_qq_line() +            # QQ 线
stat_qq_point() +           # QQ 点
facet_wrap(~ Target) +      # 按 Target 列的值分面
labs(x = "Theoretical Quantiles", y = "Sample Quantiles") +  # 标签
theme_minimal()  # 使用简洁主题
# 打印图形
print(gg)
require(qqplotr)
# 读取数据
cleaned_data <- read.csv("C:/Users/shaok/Desktop/Delete_0727_desktop/train_cleaned_Cb.csv")
# 检查 Target 列和 SPK 列是否存在
if (!("Target" %in% names(cleaned_data)) || !("SPK" %in% names(cleaned_data))) {
stop("Data must contain 'SPK' and 'Target' columns")
}
# 使用 ggplot2 绘制 QQ 图
gg <- ggplot(data = cleaned_data, mapping = aes(sample = SPK, color = Target, fill = Target)) +
stat_qq_band(alpha = 0.5) +  # 添加置信带
stat_qq_line() +            # QQ 线
stat_qq_point() +           # QQ 点
facet_wrap(~ Target) +      # 按 Target 列的值分面
labs(x = "Theoretical Quantiles", y = "Sample Quantiles") +  # 标签
theme_minimal()  # 使用简洁主题
# 打印图形
print(gg)
# install.packages("lattice")
require(qqplotr)
data("barley", package = "lattice")
gg <- ggplot(data = barley, mapping = aes(sample = yield, color = site, fill = site)) +
stat_qq_band(alpha=0.5) +
stat_qq_line() +
stat_qq_point() +
facet_wrap(~ site) +
labs(x = "Theoretical Quantiles", y = "Sample Quantiles")
gg
setwd("D:/Cache/Github/SRE_procedural_notes/DevOps_Notes")
