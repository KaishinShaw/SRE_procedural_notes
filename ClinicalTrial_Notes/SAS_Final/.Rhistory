color = "blue", size = 1) +
labs(title = "Histogram of Residuals with Normal Curve",
x = "Residuals", y = "Density") +
theme_minimal()
# QQ plot for checking normality
ggplot(data.frame(residuals = residuals(model)), aes(sample = residuals)) +
stat_qq() +
stat_qq_line(color = "red") +
labs(title = "Normal Q-Q Plot of Residuals") +
theme_minimal()
# Check for influential observations
# Calculate Cook's distance
cooks_d <- cooks.distance(model)
influential <- cooks_d > (4/length(cooks_d))
print(paste("Number of influential points identified:", sum(influential)))
# Plot Cook's distance
plot(cooks_d, type = "h", main = "Cook's Distance", ylab = "Cook's Distance", xlab = "Observation")
abline(h = 4/length(cooks_d), col = "red", lty = 2)
# Check for outliers using standardized residuals
std_resid <- rstandard(model)
outliers <- abs(std_resid) > 2
print(paste("Number of potential outliers (|standardized residuals| > 2):", sum(outliers)))
# Combine all diagnostics in a data frame for examination
diagnostics <- data.frame(
observation = 1:length(df$y),
actual = df$y,
fitted = fitted(model),
residuals = residuals(model),
std_residuals = std_resid,
cooks_distance = cooks_d,
leverage = hatvalues(model)
)
# Show the top 10 most influential observations
print("Top 10 most influential observations:")
print(diagnostics[order(diagnostics$cooks_distance, decreasing = TRUE)[1:10], ])
# Summary of assumption checks
cat("\n--- SUMMARY OF REGRESSION ASSUMPTION CHECKS ---\n")
cat("1. Linearity: Check scatter plot and component+residual plot visually\n")
cat("2. Independence: Durbin-Watson test p-value =", dw_test$p.value,
ifelse(dw_test$p.value > 0.05, "✓", "✗"), "\n")
cat("3. Homoscedasticity: Breusch-Pagan test p-value =", bp_test$p.value,
ifelse(bp_test$p.value > 0.05, "✓", "✗"), "\n")
cat("4. Normality of residuals: Shapiro-Wilk test p-value =", sw_test$p.value,
ifelse(sw_test$p.value > 0.05, "✓", "✗"), "\n")
cat("5. Outliers & Influential points: Found", sum(outliers), "potential outliers and",
sum(influential), "influential observations\n")
# 加载必要的包
library(car)      # 回归诊断
library(lmtest)   # 假设检验（如Durbin-Watson和Breusch-Pagan测试）
library(ggplot2)  # 更好的数据可视化
library(nortest)  # 正态性检验（Anderson-Darling测试）
# 输入数据
data_values <- c(
4.05, 3.33, 2.88, 3.77, 2.57, 3.16, 2.79, 2.64, 2.15, 2.90, 3.07, 2.74, 3.58, 3.24, 3.84, 3.16,
2.86, 3.04, 2.86, 2.53, 2.52, 3.53, 3.23, 2.64, 3.56, 4.25, 3.24, 3.41, 3.00, 4.19, 2.45, 4.08,
2.98, 3.72, 2.11, 3.38, 3.23, 2.04, 3.93, 2.81, 3.19, 2.82, 2.60, 3.83, 4.08, 2.75, 2.74, 3.04,
4.32, 3.26, 2.84, 2.94, 3.96, 3.02, 2.76, 4.02, 2.48, 3.78, 3.28, 2.45, 2.90, 2.39, 3.93, 3.65,
3.33, 3.05, 3.03, 3.01, 3.02, 3.82, 3.12, 3.65, 2.78, 2.84, 3.02, 2.60, 3.20, 3.04, 3.07, 2.92,
3.31, 3.22, 4.03, 3.66, 3.39, 3.49, 2.91, 3.12, 2.88, 2.66, 3.76, 3.82, 2.50, 2.60, 2.81, 2.96,
3.78, 3.59, 2.97, 3.63, 1.35, 1.78, 13.32, 8.20, 7.85, 11.31, 2.24, 1.82, 15.01, 14.98, 11.32,
9.57, 8.37, 8.37, 6.34, 13.32, 6.45, 8.48, 8.91, 11.21, 9.77, 7.86, 8.54, 8.28, 14.12
)
# 创建数据框，增加一个序列变量
df <- data.frame(
y = data_values,
x = 1:length(data_values)
)
# 绘制散点图及回归直线
ggplot(df, aes(x = x, y = y)) +
geom_point() +
geom_smooth(method = "lm", se = TRUE) +
labs(title = "带回归直线的散点图",
x = "序列", y = "数值") +
theme_minimal()
# 进行线性回归
model <- lm(y ~ x, data = df)
# 输出回归结果摘要
summary_result <- summary(model)
print(summary_result)
# 绘制基本诊断图（使用 base 图形）
par(mfrow = c(2, 2))
plot(model)
par(mfrow = c(1, 1))
# 线性关系检验：画成分残差图（Component+Residual Plot），该图在 car 包中提供
crPlot(model, "x", col = "blue", main = "成分残差图（检验线性关系）")
# 计算残差并存入变量，便于后续调用
resids <- residuals(model)
# 独立性检验：Durbin-Watson 测试
dw_test <- dwtest(model)
print("Durbin-Watson 独立性检验结果：")
print(dw_test)
# 同方差性检验：Breusch-Pagan 测试
bp_test <- bptest(model)
print("Breusch-Pagan 同方差性检验结果：")
print(bp_test)
# 绘制残差直方图和密度曲线（保留一份即可）
ggplot(data.frame(residuals = resids), aes(x = residuals)) +
geom_histogram(aes(y = after_stat(density)), bins = 20, fill = "skyblue", color = "black") +
geom_density(color = "red", linewidth = 1) +
stat_function(fun = dnorm,
args = list(mean = mean(resids), sd = sd(resids)),
color = "blue", linewidth = 1) +
labs(title = "残差直方图（附正态分布曲线）",
x = "残差", y = "密度") +
theme_minimal()
# 正态性检验
# Shapiro-Wilk 检验
sw_test <- shapiro.test(resids)
print("Shapiro-Wilk 正态性检验结果：")
print(sw_test)
# Anderson-Darling 正态性检验（来自 nortest 包）
ad_test <- ad.test(resids)
print("Anderson-Darling 正态性检验结果：")
print(ad_test)
# 绘制正态 QQ 图检查残差正态性
ggplot(data.frame(residuals = resids), aes(sample = residuals)) +
stat_qq() +
stat_qq_line(color = "red") +
labs(title = "残差正态 QQ 图") +
theme_minimal()
# 检查高影响点
# 计算 Cook 距离
cooks_d <- cooks.distance(model)
# 使用经验阈值 4/n
influential <- cooks_d > (4/length(cooks_d))
print(paste("识别出的高影响点数：", sum(influential)))
# 绘制 Cook 距离图
plot(cooks_d, type = "h", main = "Cook 距离", ylab = "Cook 距离", xlab = "观测值")
abline(h = 4/length(cooks_d), col = "red", lty = 2)
# 使用标准化残差检测异常值
std_resid <- rstandard(model)
outliers <- abs(std_resid) > 2
print(paste("(|标准化残差| > 2) 的可能异常值数：", sum(outliers)))
# 将所有诊断结果合并为数据框以供检查
diagnostics <- data.frame(
observation    = 1:nrow(df),
actual         = df$y,
fitted         = fitted(model),
residuals      = resids,
std_residuals  = std_resid,
cooks_distance = cooks_d,
leverage       = hatvalues(model)
)
# 显示 Cook 距离前 10 个最具影响力的观测点
print("Cook 距离前 10 个最具影响力的观测点：")
top10_indices <- order(diagnostics$cooks_distance, decreasing = TRUE)[1:10]
print(diagnostics[top10_indices, ])
# 对模型诊断假设进行总结
cat("\n--- 回归假设检验总结 ---\n")
cat("1. 线性关系：请通过散点图和成分残差图进行视觉检验\n")
cat("2. 独立性：Durbin-Watson 检验 p-value =", dw_test$p.value,
ifelse(dw_test$p.value > 0.05, "（通过 ✓）", "（不通过 ✗）"), "\n")
cat("3. 同方差性：Breusch-Pagan 检验 p-value =", bp_test$p.value,
ifelse(bp_test$p.value > 0.05, "（通过 ✓）", "（不通过 ✗）"), "\n")
cat("4. 残差正态性：Shapiro-Wilk 检验 p-value =", sw_test$p.value,
ifelse(sw_test$p.value > 0.05, "（通过 ✓）", "（不通过 ✗）"), "\n")
cat("5. 异常值及高影响点：检测到", sum(outliers), "个可能异常值和",
sum(influential), "个高影响点\n")
# 关闭所有图形设备（如果不确定当前有多少个设备开启）
graphics.off()
# 重新打开一个新设备（例如：使用 windows()、quartz() 或 x11()，依据运行平台不同选择）
windows()  # 如果在 Windows 上
# 或者 x11()  # 如果在 Linux 上
# 关闭所有图形设备（如果不确定当前有多少个设备开启）
graphics.off()
# 重新打开一个新设备（例如：使用 windows()、quartz() 或 x11()，依据运行平台不同选择）
windows()  # 如果在 Windows 上
# 或者 x11()  # 如果在 Linux 上
# 关闭所有图形设备（如果不确定当前有多少个设备开启）
graphics.off()
# 重新打开一个新设备（例如：使用 windows()、quartz() 或 x11()，依据运行平台不同选择）
windows()  # 如果在 Windows 上
# 或者 x11()  # 如果在 Linux 上
# 加载必要的包
library(car)      # 回归诊断
library(lmtest)   # 假设检验（如Durbin-Watson和Breusch-Pagan测试）
library(ggplot2)  # 更好的数据可视化
library(nortest)  # 正态性检验（Anderson-Darling测试）
# 输入数据
data_values <- c(
4.05, 3.33, 2.88, 3.77, 2.57, 3.16, 2.79, 2.64, 2.15, 2.90, 3.07, 2.74, 3.58, 3.24, 3.84, 3.16,
2.86, 3.04, 2.86, 2.53, 2.52, 3.53, 3.23, 2.64, 3.56, 4.25, 3.24, 3.41, 3.00, 4.19, 2.45, 4.08,
2.98, 3.72, 2.11, 3.38, 3.23, 2.04, 3.93, 2.81, 3.19, 2.82, 2.60, 3.83, 4.08, 2.75, 2.74, 3.04,
4.32, 3.26, 2.84, 2.94, 3.96, 3.02, 2.76, 4.02, 2.48, 3.78, 3.28, 2.45, 2.90, 2.39, 3.93, 3.65,
3.33, 3.05, 3.03, 3.01, 3.02, 3.82, 3.12, 3.65, 2.78, 2.84, 3.02, 2.60, 3.20, 3.04, 3.07, 2.92,
3.31, 3.22, 4.03, 3.66, 3.39, 3.49, 2.91, 3.12, 2.88, 2.66, 3.76, 3.82, 2.50, 2.60, 2.81, 2.96,
3.78, 3.59, 2.97, 3.63, 1.35, 1.78, 13.32, 8.20, 7.85, 11.31, 2.24, 1.82, 15.01, 14.98, 11.32,
9.57, 8.37, 8.37, 6.34, 13.32, 6.45, 8.48, 8.91, 11.21, 9.77, 7.86, 8.54, 8.28, 14.12
)
# 创建数据框，增加一个序列变量
df <- data.frame(
y = data_values,
x = 1:length(data_values)
)
# 绘制散点图及回归直线
ggplot(df, aes(x = x, y = y)) +
geom_point() +
geom_smooth(method = "lm", se = TRUE) +
labs(title = "带回归直线的散点图",
x = "序列", y = "数值") +
theme_minimal()
# 进行线性回归
model <- lm(y ~ x, data = df)
# 输出回归结果摘要
summary_result <- summary(model)
print(summary_result)
# 绘制基本诊断图（使用 base 图形）
par(mfrow = c(2, 2))
plot(model)
par(mfrow = c(1, 1))
# 线性关系检验：画成分残差图（Component+Residual Plot），该图在 car 包中提供
crPlot(model, "x", col = "blue", main = "成分残差图（检验线性关系）")
# 计算残差并存入变量，便于后续调用
resids <- residuals(model)
# 独立性检验：Durbin-Watson 测试
dw_test <- dwtest(model)
print("Durbin-Watson 独立性检验结果：")
print(dw_test)
# 同方差性检验：Breusch-Pagan 测试
bp_test <- bptest(model)
print("Breusch-Pagan 同方差性检验结果：")
print(bp_test)
# 绘制残差直方图和密度曲线（保留一份即可）
ggplot(data.frame(residuals = resids), aes(x = residuals)) +
geom_histogram(aes(y = after_stat(density)), bins = 20, fill = "skyblue", color = "black") +
geom_density(color = "red", linewidth = 1) +
stat_function(fun = dnorm,
args = list(mean = mean(resids), sd = sd(resids)),
color = "blue", linewidth = 1) +
labs(title = "残差直方图（附正态分布曲线）",
x = "残差", y = "密度") +
theme_minimal()
# 正态性检验
# Shapiro-Wilk 检验
sw_test <- shapiro.test(resids)
print("Shapiro-Wilk 正态性检验结果：")
print(sw_test)
# Anderson-Darling 正态性检验（来自 nortest 包）
ad_test <- ad.test(resids)
print("Anderson-Darling 正态性检验结果：")
print(ad_test)
# 绘制正态 QQ 图检查残差正态性
ggplot(data.frame(residuals = resids), aes(sample = residuals)) +
stat_qq() +
stat_qq_line(color = "red") +
labs(title = "残差正态 QQ 图") +
theme_minimal()
# 检查高影响点
# 计算 Cook 距离
cooks_d <- cooks.distance(model)
# 使用经验阈值 4/n
influential <- cooks_d > (4/length(cooks_d))
print(paste("识别出的高影响点数：", sum(influential)))
# 绘制 Cook 距离图
plot(cooks_d, type = "h", main = "Cook 距离", ylab = "Cook 距离", xlab = "观测值")
abline(h = 4/length(cooks_d), col = "red", lty = 2)
# 使用标准化残差检测异常值
std_resid <- rstandard(model)
outliers <- abs(std_resid) > 2
print(paste("(|标准化残差| > 2) 的可能异常值数：", sum(outliers)))
# 将所有诊断结果合并为数据框以供检查
diagnostics <- data.frame(
observation    = 1:nrow(df),
actual         = df$y,
fitted         = fitted(model),
residuals      = resids,
std_residuals  = std_resid,
cooks_distance = cooks_d,
leverage       = hatvalues(model)
)
# 显示 Cook 距离前 10 个最具影响力的观测点
print("Cook 距离前 10 个最具影响力的观测点：")
top10_indices <- order(diagnostics$cooks_distance, decreasing = TRUE)[1:10]
print(diagnostics[top10_indices, ])
# 对模型诊断假设进行总结
cat("\n--- 回归假设检验总结 ---\n")
cat("1. 线性关系：请通过散点图和成分残差图进行视觉检验\n")
cat("2. 独立性：Durbin-Watson 检验 p-value =", dw_test$p.value,
ifelse(dw_test$p.value > 0.05, "（通过 ✓）", "（不通过 ✗）"), "\n")
cat("3. 同方差性：Breusch-Pagan 检验 p-value =", bp_test$p.value,
ifelse(bp_test$p.value > 0.05, "（通过 ✓）", "（不通过 ✗）"), "\n")
cat("4. 残差正态性：Shapiro-Wilk 检验 p-value =", sw_test$p.value,
ifelse(sw_test$p.value > 0.05, "（通过 ✓）", "（不通过 ✗）"), "\n")
cat("5. 异常值及高影响点：检测到", sum(outliers), "个可能异常值和",
sum(influential), "个高影响点\n")
# 加载必要的包
library(car)      # 回归诊断
library(lmtest)   # 假设检验（如Durbin-Watson和Breusch-Pagan测试）
library(ggplot2)  # 更好的数据可视化
library(nortest)  # 正态性检验（Anderson-Darling测试）
# 输入数据
data_values <- c(
4.05, 3.33, 2.88, 3.77, 2.57, 3.16, 2.79, 2.64, 2.15, 2.90, 3.07, 2.74, 3.58, 3.24, 3.84, 3.16,
2.86, 3.04, 2.86, 2.53, 2.52, 3.53, 3.23, 2.64, 3.56, 4.25, 3.24, 3.41, 3.00, 4.19, 2.45, 4.08,
2.98, 3.72, 2.11, 3.38, 3.23, 2.04, 3.93, 2.81, 3.19, 2.82, 2.60, 3.83, 4.08, 2.75, 2.74, 3.04,
4.32, 3.26, 2.84, 2.94, 3.96, 3.02, 2.76, 4.02, 2.48, 3.78, 3.28, 2.45, 2.90, 2.39, 3.93, 3.65,
3.33, 3.05, 3.03, 3.01, 3.02, 3.82, 3.12, 3.65, 2.78, 2.84, 3.02, 2.60, 3.20, 3.04, 3.07, 2.92,
3.31, 3.22, 4.03, 3.66, 3.39, 3.49, 2.91, 3.12, 2.88, 2.66, 3.76, 3.82, 2.50, 2.60, 2.81, 2.96,
3.78, 3.59, 2.97, 3.63, 1.35, 1.78, 13.32, 8.20, 7.85, 11.31, 2.24, 1.82, 15.01, 14.98, 11.32,
9.57, 8.37, 8.37, 6.34, 13.32, 6.45, 8.48, 8.91, 11.21, 9.77, 7.86, 8.54, 8.28, 14.12
)
# 创建数据框，增加一个序列变量
df <- data.frame(
y = data_values,
x = 1:length(data_values)
)
# 绘制散点图及回归直线
ggplot(df, aes(x = x, y = y)) +
geom_point() +
geom_smooth(method = "lm", se = TRUE) +
labs(title = "带回归直线的散点图",
x = "序列", y = "数值") +
theme_minimal()
# 进行线性回归
model <- lm(y ~ x, data = df)
# 输出回归结果摘要
summary_result <- summary(model)
print(summary_result)
# 绘制基本诊断图（使用 base 图形）
par(mfrow = c(2, 2))
plot(model)
par(mfrow = c(1, 1))
# 线性关系检验：画成分残差图（Component+Residual Plot），该图在 car 包中提供
crPlot(model, "x", col = "blue", main = "成分残差图（检验线性关系）")
# 计算残差并存入变量，便于后续调用
resids <- residuals(model)
# 独立性检验：Durbin-Watson 测试
dw_test <- dwtest(model)
print("Durbin-Watson 独立性检验结果：")
print(dw_test)
# 同方差性检验：Breusch-Pagan 测试
bp_test <- bptest(model)
print("Breusch-Pagan 同方差性检验结果：")
print(bp_test)
# 绘制残差直方图和密度曲线（保留一份即可）
ggplot(data.frame(residuals = resids), aes(x = residuals)) +
geom_histogram(aes(y = after_stat(density)), bins = 20, fill = "skyblue", color = "black") +
geom_density(color = "red", linewidth = 1) +
stat_function(fun = dnorm,
args = list(mean = mean(resids), sd = sd(resids)),
color = "blue", linewidth = 1) +
labs(title = "残差直方图（附正态分布曲线）",
x = "残差", y = "密度") +
theme_minimal()
# 正态性检验
# Shapiro-Wilk 检验
sw_test <- shapiro.test(resids)
print("Shapiro-Wilk 正态性检验结果：")
print(sw_test)
# Anderson-Darling 正态性检验（来自 nortest 包）
ad_test <- ad.test(resids)
print("Anderson-Darling 正态性检验结果：")
print(ad_test)
# 绘制正态 QQ 图检查残差正态性
ggplot(data.frame(residuals = resids), aes(sample = residuals)) +
stat_qq() +
stat_qq_line(color = "red") +
labs(title = "残差正态 QQ 图") +
theme_minimal()
# 检查高影响点
# 计算 Cook 距离
cooks_d <- cooks.distance(model)
# 使用经验阈值 4/n
influential <- cooks_d > (4/length(cooks_d))
print(paste("识别出的高影响点数：", sum(influential)))
# 绘制 Cook 距离图
plot(cooks_d, type = "h", main = "Cook 距离", ylab = "Cook 距离", xlab = "观测值")
abline(h = 4/length(cooks_d), col = "red", lty = 2)
# 使用标准化残差检测异常值
std_resid <- rstandard(model)
outliers <- abs(std_resid) > 2
print(paste("(|标准化残差| > 2) 的可能异常值数：", sum(outliers)))
# 将所有诊断结果合并为数据框以供检查
diagnostics <- data.frame(
observation    = 1:nrow(df),
actual         = df$y,
fitted         = fitted(model),
residuals      = resids,
std_residuals  = std_resid,
cooks_distance = cooks_d,
leverage       = hatvalues(model)
)
# 显示 Cook 距离前 10 个最具影响力的观测点
print("Cook 距离前 10 个最具影响力的观测点：")
top10_indices <- order(diagnostics$cooks_distance, decreasing = TRUE)[1:10]
print(diagnostics[top10_indices, ])
# 对模型诊断假设进行总结
cat("\n--- 回归假设检验总结 ---\n")
cat("1. 线性关系：请通过散点图和成分残差图进行视觉检验\n")
cat("2. 独立性：Durbin-Watson 检验 p-value =", dw_test$p.value,
ifelse(dw_test$p.value > 0.05, "（通过 ✓）", "（不通过 ✗）"), "\n")
cat("3. 同方差性：Breusch-Pagan 检验 p-value =", bp_test$p.value,
ifelse(bp_test$p.value > 0.05, "（通过 ✓）", "（不通过 ✗）"), "\n")
cat("4. 残差正态性：Shapiro-Wilk 检验 p-value =", sw_test$p.value,
ifelse(sw_test$p.value > 0.05, "（通过 ✓）", "（不通过 ✗）"), "\n")
cat("5. 异常值及高影响点：检测到", sum(outliers), "个可能异常值和",
sum(influential), "个高影响点\n")
# 加载必要的包
library(car)      # 回归诊断
library(lmtest)   # 假设检验（如Durbin-Watson和Breusch-Pagan测试）
library(ggplot2)  # 更好的数据可视化
library(nortest)  # 正态性检验（Anderson-Darling测试）
# 输入数据
data_values <- c(
4.05, 3.33, 2.88, 3.77, 2.57, 3.16, 2.79, 2.64, 2.15, 2.90, 3.07, 2.74, 3.58, 3.24, 3.84, 3.16,
2.86, 3.04, 2.86, 2.53, 2.52, 3.53, 3.23, 2.64, 3.56, 4.25, 3.24, 3.41, 3.00, 4.19, 2.45, 4.08,
2.98, 3.72, 2.11, 3.38, 3.23, 2.04, 3.93, 2.81, 3.19, 2.82, 2.60, 3.83, 4.08, 2.75, 2.74, 3.04,
4.32, 3.26, 2.84, 2.94, 3.96, 3.02, 2.76, 4.02, 2.48, 3.78, 3.28, 2.45, 2.90, 2.39, 3.93, 3.65,
3.33, 3.05, 3.03, 3.01, 3.02, 3.82, 3.12, 3.65, 2.78, 2.84, 3.02, 2.60, 3.20, 3.04, 3.07, 2.92,
3.31, 3.22, 4.03, 3.66, 3.39, 3.49, 2.91, 3.12, 2.88, 2.66, 3.76, 3.82, 2.50, 2.60, 2.81, 2.96,
3.78, 3.59, 2.97, 3.63, 1.35, 1.78, 13.32, 8.20, 7.85, 11.31, 2.24, 1.82, 15.01, 14.98, 11.32,
9.57, 8.37, 8.37, 6.34, 13.32, 6.45, 8.48, 8.91, 11.21, 9.77, 7.86, 8.54, 8.28, 14.12
)
# 创建数据框，增加一个序列变量
df <- data.frame(
y = data_values,
x = 1:length(data_values)
)
# 绘制散点图及回归直线
ggplot(df, aes(x = x, y = y)) +
geom_point() +
geom_smooth(method = "lm", se = TRUE) +
labs(title = "带回归直线的散点图",
x = "序列", y = "数值") +
theme_minimal()
# 进行线性回归
model <- lm(y ~ x, data = df)
# 输出回归结果摘要
summary_result <- summary(model)
print(summary_result)
# 绘制基本诊断图（使用 base 图形）
par(mfrow = c(2, 2))
plot(model)
par(mfrow = c(1, 1))
# 线性关系检验：画成分残差图（Component+Residual Plot），该图在 car 包中提供
crPlot(model, "x", col = "blue", main = "成分残差图（检验线性关系）")
# 计算残差并存入变量，便于后续调用
resids <- residuals(model)
# 独立性检验：Durbin-Watson 测试
dw_test <- dwtest(model)
print("Durbin-Watson 独立性检验结果：")
print(dw_test)
# 同方差性检验：Breusch-Pagan 测试
bp_test <- bptest(model)
print("Breusch-Pagan 同方差性检验结果：")
print(bp_test)
# 绘制残差直方图和密度曲线（保留一份即可）
ggplot(data.frame(residuals = resids), aes(x = residuals)) +
geom_histogram(aes(y = after_stat(density)), bins = 20, fill = "skyblue", color = "black") +
geom_density(color = "red", linewidth = 1) +
stat_function(fun = dnorm,
args = list(mean = mean(resids), sd = sd(resids)),
color = "blue", linewidth = 1) +
labs(title = "残差直方图（附正态分布曲线）",
x = "残差", y = "密度") +
theme_minimal()
# 正态性检验
# Shapiro-Wilk 检验
sw_test <- shapiro.test(resids)
print("Shapiro-Wilk 正态性检验结果：")
print(sw_test)
# Anderson-Darling 正态性检验（来自 nortest 包）
ad_test <- ad.test(resids)
print("Anderson-Darling 正态性检验结果：")
print(ad_test)
# 绘制正态 QQ 图检查残差正态性
ggplot(data.frame(residuals = resids), aes(sample = residuals)) +
stat_qq() +
stat_qq_line(color = "red") +
labs(title = "残差正态 QQ 图") +
theme_minimal()
# 检查高影响点
# 计算 Cook 距离
cooks_d <- cooks.distance(model)
# 使用经验阈值 4/n
influential <- cooks_d > (4/length(cooks_d))
print(paste("识别出的高影响点数：", sum(influential)))
# 绘制 Cook 距离图
plot(cooks_d, type = "h", main = "Cook 距离", ylab = "Cook 距离", xlab = "观测值")
abline(h = 4/length(cooks_d), col = "red", lty = 2)
# 使用标准化残差检测异常值
std_resid <- rstandard(model)
outliers <- abs(std_resid) > 2
print(paste("(|标准化残差| > 2) 的可能异常值数：", sum(outliers)))
# 将所有诊断结果合并为数据框以供检查
diagnostics <- data.frame(
observation    = 1:nrow(df),
actual         = df$y,
fitted         = fitted(model),
residuals      = resids,
std_residuals  = std_resid,
cooks_distance = cooks_d,
leverage       = hatvalues(model)
)
# 显示 Cook 距离前 10 个最具影响力的观测点
print("Cook 距离前 10 个最具影响力的观测点：")
top10_indices <- order(diagnostics$cooks_distance, decreasing = TRUE)[1:10]
print(diagnostics[top10_indices, ])
# 对模型诊断假设进行总结
cat("\n--- 回归假设检验总结 ---\n")
cat("1. 线性关系：请通过散点图和成分残差图进行视觉检验\n")
cat("2. 独立性：Durbin-Watson 检验 p-value =", dw_test$p.value,
ifelse(dw_test$p.value > 0.05, "（通过 ✓）", "（不通过 ✗）"), "\n")
cat("3. 同方差性：Breusch-Pagan 检验 p-value =", bp_test$p.value,
ifelse(bp_test$p.value > 0.05, "（通过 ✓）", "（不通过 ✗）"), "\n")
cat("4. 残差正态性：Shapiro-Wilk 检验 p-value =", sw_test$p.value,
ifelse(sw_test$p.value > 0.05, "（通过 ✓）", "（不通过 ✗）"), "\n")
cat("5. 异常值及高影响点：检测到", sum(outliers), "个可能异常值和",
sum(influential), "个高影响点\n")
install.packages("tidycmprsk")
install.packages("tidycmprsk", type = "source", dependencies = TRUE)
setwd("G:/Coding/procedural_notes/ClinicalTrial_Notes/SAS_Final")
